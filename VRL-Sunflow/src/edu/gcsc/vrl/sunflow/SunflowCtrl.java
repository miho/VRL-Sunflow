/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.gcsc.vrl.sunflow;

import eu.mihosoft.vrl.v3d.Shape3DArray;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.HashMap;
import javax.media.j3d.Shape3D;
import javax.media.j3d.TriangleArray;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import javax.swing.text.DefaultCaret;
import javax.vecmath.Point3f;
import org.sunflow.SunflowAPI;
import org.sunflow.math.Matrix4;
import org.sunflow.math.Point3;
import org.sunflow.math.Vector3;
import org.sunflow.system.UI;
import org.sunflow.system.UI.Module;
import org.sunflow.system.UI.PrintLevel;
import org.sunflow.system.UserInterface;

/**
 *
 * @author ThomasL
 */
public class SunflowCtrl extends javax.swing.JPanel implements UserInterface {

    /**
     * Creates new form SunflowCtrl
     */
    public SunflowCtrl() {
        initComponents();
        buildGUI();
        
        btnRender.setEnabled(true);
        btnCancel.setEnabled(false);        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        panelImageSettings = new javax.swing.JPanel();
        panelBackgroundSettings = new javax.swing.JPanel();
        tab3 = new javax.swing.JPanel();
        panelShaderSettings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbShaderTypes = new javax.swing.JComboBox();
        tab4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cbLightTypes = new javax.swing.JComboBox();
        panelLightSettings = new javax.swing.JPanel();
        tab5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        cbCameraTypes = new javax.swing.JComboBox();
        panelCameraSettings = new javax.swing.JPanel();
        panelInfos = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        labelBounds = new javax.swing.JLabel();
        labelCenter = new javax.swing.JLabel();
        labelDiameter = new javax.swing.JLabel();
        imagePanel1 = new org.sunflow.system.ImagePanel();
        btnRender = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        taOutput = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        btnSaveImage = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        javax.swing.GroupLayout panelImageSettingsLayout = new javax.swing.GroupLayout(panelImageSettings);
        panelImageSettings.setLayout(panelImageSettingsLayout);
        panelImageSettingsLayout.setHorizontalGroup(
            panelImageSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );
        panelImageSettingsLayout.setVerticalGroup(
            panelImageSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Image", panelImageSettings);

        javax.swing.GroupLayout panelBackgroundSettingsLayout = new javax.swing.GroupLayout(panelBackgroundSettings);
        panelBackgroundSettings.setLayout(panelBackgroundSettingsLayout);
        panelBackgroundSettingsLayout.setHorizontalGroup(
            panelBackgroundSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 391, Short.MAX_VALUE)
        );
        panelBackgroundSettingsLayout.setVerticalGroup(
            panelBackgroundSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 319, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Background", panelBackgroundSettings);

        javax.swing.GroupLayout panelShaderSettingsLayout = new javax.swing.GroupLayout(panelShaderSettings);
        panelShaderSettings.setLayout(panelShaderSettingsLayout);
        panelShaderSettingsLayout.setHorizontalGroup(
            panelShaderSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelShaderSettingsLayout.setVerticalGroup(
            panelShaderSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );

        jLabel1.setText("Shader Types");

        javax.swing.GroupLayout tab3Layout = new javax.swing.GroupLayout(tab3);
        tab3.setLayout(tab3Layout);
        tab3Layout.setHorizontalGroup(
            tab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelShaderSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(tab3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cbShaderTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(149, Short.MAX_VALUE))
        );
        tab3Layout.setVerticalGroup(
            tab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbShaderTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelShaderSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        cbShaderTypes.getAccessibleContext().setAccessibleName("cbShaderTypes");

        jTabbedPane1.addTab("Shader", tab3);

        jLabel2.setText("Light Types");

        javax.swing.GroupLayout panelLightSettingsLayout = new javax.swing.GroupLayout(panelLightSettings);
        panelLightSettings.setLayout(panelLightSettingsLayout);
        panelLightSettingsLayout.setHorizontalGroup(
            panelLightSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLightSettingsLayout.setVerticalGroup(
            panelLightSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout tab4Layout = new javax.swing.GroupLayout(tab4);
        tab4.setLayout(tab4Layout);
        tab4Layout.setHorizontalGroup(
            tab4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelLightSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(tab4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cbLightTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        tab4Layout.setVerticalGroup(
            tab4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbLightTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelLightSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Light", tab4);

        jLabel3.setText("Camera Types");

        javax.swing.GroupLayout panelCameraSettingsLayout = new javax.swing.GroupLayout(panelCameraSettings);
        panelCameraSettings.setLayout(panelCameraSettingsLayout);
        panelCameraSettingsLayout.setHorizontalGroup(
            panelCameraSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelCameraSettingsLayout.setVerticalGroup(
            panelCameraSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 271, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout tab5Layout = new javax.swing.GroupLayout(tab5);
        tab5.setLayout(tab5Layout);
        tab5Layout.setHorizontalGroup(
            tab5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelCameraSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(tab5Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(cbCameraTypes, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(146, Short.MAX_VALUE))
        );
        tab5Layout.setVerticalGroup(
            tab5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cbCameraTypes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCameraSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Camera", tab5);

        jLabel4.setText("Bounds");

        jLabel5.setText("Center");

        jLabel6.setText("Diameter");

        labelBounds.setText("...");

        labelCenter.setText("...");

        labelDiameter.setText("...");

        javax.swing.GroupLayout panelInfosLayout = new javax.swing.GroupLayout(panelInfos);
        panelInfos.setLayout(panelInfosLayout);
        panelInfosLayout.setHorizontalGroup(
            panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfosLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelCenter)
                    .addGroup(panelInfosLayout.createSequentialGroup()
                        .addGroup(panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGroup(panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelInfosLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(labelDiameter))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelInfosLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelBounds)))))
                .addContainerGap(278, Short.MAX_VALUE))
        );
        panelInfosLayout.setVerticalGroup(
            panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInfosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(labelBounds))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(labelCenter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelInfosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(labelDiameter))
                .addContainerGap(254, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Infos", panelInfos);

        javax.swing.GroupLayout imagePanel1Layout = new javax.swing.GroupLayout(imagePanel1);
        imagePanel1.setLayout(imagePanel1Layout);
        imagePanel1Layout.setHorizontalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
        );
        imagePanel1Layout.setVerticalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        btnRender.setText("render");
        btnRender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRenderActionPerformed(evt);
            }
        });

        taOutput.setColumns(20);
        taOutput.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        taOutput.setRows(5);
        jScrollPane1.setViewportView(taOutput);

        btnSaveImage.setText("save");
        btnSaveImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveImageActionPerformed(evt);
            }
        });

        btnCancel.setText("cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRender)
                        .addGap(1, 1, 1)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveImage, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRender)
                            .addComponent(btnCancel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(imagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSaveImage)
                .addGap(4, 4, 4))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnRenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRenderActionPerformed
        // TODO add your handling code here:
        btnRender.setEnabled(false);
        btnCancel.setEnabled(true);
        render();
    }//GEN-LAST:event_btnRenderActionPerformed

    private void btnSaveImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveImageActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setDialogTitle("Save rendered image");
        int res = fileChooser.showSaveDialog(this);
        if (res == JFileChooser.APPROVE_OPTION) 
        {
            File file = fileChooser.getSelectedFile();
            if (file.exists()) {
                int res2 = JOptionPane.showConfirmDialog(this, "File already exists. Do you wish to override?");
                if (res2 == JOptionPane.NO_OPTION) {
                    return;
                }
            }
            try {
                imagePanel1.save(file.getAbsolutePath());
                JOptionPane.showMessageDialog(this, "Image " + file.getName() + " was saved successfully.", "File save", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), "File save error", JOptionPane.ERROR_MESSAGE);
            }
        }      
        
    }//GEN-LAST:event_btnSaveImageActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        UI.taskCancel();
        btnRender.setEnabled(true);
        btnCancel.setEnabled(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    //<editor-fold defaultstate="collapsed" desc="designer generated variables">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnRender;
    private javax.swing.JButton btnSaveImage;
    private javax.swing.JComboBox cbCameraTypes;
    private javax.swing.JComboBox cbLightTypes;
    private javax.swing.JComboBox cbShaderTypes;
    private org.sunflow.system.ImagePanel imagePanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelBounds;
    private javax.swing.JLabel labelCenter;
    private javax.swing.JLabel labelDiameter;
    private javax.swing.JPanel panelBackgroundSettings;
    private javax.swing.JPanel panelCameraSettings;
    private javax.swing.JPanel panelImageSettings;
    private javax.swing.JPanel panelInfos;
    private javax.swing.JPanel panelLightSettings;
    private javax.swing.JPanel panelShaderSettings;
    private javax.swing.JTextArea taOutput;
    private javax.swing.JPanel tab3;
    private javax.swing.JPanel tab4;
    private javax.swing.JPanel tab5;
    // End of variables declaration//GEN-END:variables
    //</editor-fold>


    
    
    float[] orientation;
    Shape3DArray shapes;    
    
    public void setRenderObject(RenderObject r)
    {
        this.orientation = r.getOrientation();
        this.shapes = r.getShapes();
    }
    



    //<editor-fold defaultstate="collapsed" desc="rendering">
    
    ////////////////////////////////////////////////////////////////////////////
    //                             R E N D E R
    ////////////////////////////////////////////////////////////////////////////

    
    private SunflowAPI sun = new SunflowAPI();
    

    private void render()
    {
        // set this as sunflow user interface for messaging and progress notifications
        UI.set(this);
        // reset text area
        taOutput.setText("");
        // auto scroll text area
        DefaultCaret caret = (DefaultCaret)taOutput.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        
        sun.reset();
        
        
        
        // IMAGE PROPERTIES
        
        int resX            = getResolutionInput("image.resolution")[0];
        int resY            = getResolutionInput("image.resolution")[1];
        String sampler      = getComboBoxInput("image.sampler");
        float aaMin         = getFloatInput("image.aa.min");
        float aaMax         = getFloatInput("image.aa.max");
        int aaSamples       = getIntegerInput("image.aa.samples");
        float aaContrast    = getFloatInput("image.aa.contrast");
        String filter       = getComboBoxInput("image.filter");
        boolean aaJitter    = getBooleanInput("image.jitter");
        boolean aaCache     = getBooleanInput("image.cache");
        
        setImageParameter(resX, resY, sampler, aaMin, aaMax, aaSamples, aaContrast, filter, aaJitter, aaCache);
        
        
        
        // ---------------------------------------------------------------------
        // BACKGROUND
        
        float[] background = getRGBInput("background.color");
        sun.parameter("color", null, background);
        sun.shader("background.shader", "constant");
        sun.geometry("background", "background");
        sun.parameter("shaders", "background.shader");
        sun.instance("background.instance", "background");        
        
        
        
        // ---------------------------------------------------------------------
        // CAMERA
        
        // camera transformation
        sun.parameter("transform", Matrix4.lookAt(
                new Point3(0f, 5f, 35),                 // eye 
                new Point3(0f, 0f, 0f),                 // target
                new Vector3(0.0f, 1.0f, 0.0f)));        // up
        
        //sun.parameter("fov", 25.0f);
        //sun.parameter("aspect", 1.777777777777f);
        //sun.camera("camera_default", "pinhole");
        
        
        String cameraType = cbCameraTypes.getSelectedItem().toString();
        String cameraName = "camera_default";
        if (cameraType.equals("pinhole"))
        {
            float pinholeShutterOpen = getFloatInput("pinhole.shutter.open");
            float pinholeShutterClose = getFloatInput("pinhole.shutter.close");
            float pinholeFov = getFloatInput("pinhole.fov");
            float pinholeAspect = getFloatInput("pinhole.aspect");
            float pinholeShiftX = getFloatInput("pinhole.shift.x");
            float pinholeShiftY = getFloatInput("pinhole.shift.y");

            setCameraPinhole(cameraName, pinholeShutterOpen, pinholeShutterClose, 
                    pinholeFov, pinholeAspect, pinholeShiftX, pinholeShiftY);
        }
        else if (cameraType.equals("thinlens"))
        {
            float thinlensShutterOpen = getFloatInput("pinhole.shutter.open");
            float thinlensShutterClose = getFloatInput("pinhole.shutter.close");
            float thinlensFov = getFloatInput("thinlens.fov");
            float thinlensAspect = getFloatInput("thinlens.aspect");
            float thinlensShiftX = getFloatInput("thinlens.shift.x");
            float thinlensShiftY = getFloatInput("thinlens.shift.y");
            float thinlensFocusDistance = getFloatInput("thinlens.focus.distance");
            float thinlensLensRadius = getFloatInput("thinlens.lens.radius");
            float thinlensLensSides = getIntegerInput("thinlens.lens.sides");
            float thinlensLensRotation = getFloatInput("thinlens.lens.rotation");
            
            setCameraThinlens(cameraName,
                    thinlensShutterOpen, thinlensShutterClose, thinlensFov, 
                    thinlensAspect, thinlensShiftX, thinlensShiftY, 
                    thinlensFocusDistance, thinlensLensRadius, thinlensLensSides,
                    thinlensLensRotation);
        }
        else if (cameraType.equals("spherical"))
        {
            float sphericalShutterOpen = getFloatInput("spherical.shutter.open");
            float sphericalShutterClose = getFloatInput("spherical.shutter.close");
            
            setCameraSpherical(cameraName, sphericalShutterOpen, sphericalShutterClose);
        }
        else if (cameraType.equals("fisheye"))
        {
            float fisheyeShutterOpen = getFloatInput("fisheye.shutter.open");
            float fisheyeShutterClose = getFloatInput("fisheye.shutter.close");
            
            setCameraFisheye(cameraName, fisheyeShutterOpen, fisheyeShutterClose);
        }
        
        
        
        
        
        // ---------------------------------------------------------------------
        // SHADER

        String shaderType = cbShaderTypes.getSelectedItem().toString();
        String shaderName = "default";
        if (shaderType.equals("diffuse"))
        {
            float[] diffuseRGB = getRGBInput("diffuse.rgb");
            String diffuseTexture = getTextInput("diffuse.texture");
            
            if (diffuseTexture.isEmpty())
            {
                // colored shader
                setShaderDiffuse(shaderName, diffuseRGB);
            }
            else
            {
                // textured shader
                setShaderDiffuseTextured(shaderName, diffuseTexture);
            }
                        
        }
        else if (shaderType.equals("phong"))
        {
            float[] phongDiffuseRGB = getRGBInput("phong.diffuse.rgb");
            String phongTexture = getTextInput("phong.texture");
            float[] phongSpecularRGB = getRGBInput("phong.specular.rgb");
            float phongPower = getFloatInput("phong.power");
            int phongSamples = getIntegerInput("phong.samples");

            if (phongTexture.isEmpty())
            {
                // colored shader
                setShaderPhong(shaderName, phongDiffuseRGB, phongSpecularRGB, phongPower, phongSamples);
            }
            else
            {
                // textured shader
                setShaderPhongTextured(shaderName, phongTexture, phongSpecularRGB, phongPower, phongSamples);
            }
        }
        else if (shaderType.equals("ambient"))
        {
            float[] ambientBrightRGB = getRGBInput("ambient.bright.RGB");
            String ambientTexture = getTextInput("ambient.texture");
            float[] ambientDarkRGB = getRGBInput("ambient.dark.RGB");
            int ambientSamples = getIntegerInput("ambient.samples");
            float ambientMaxDist = getFloatInput("ambient.maxdist");
            
            if (ambientTexture.isEmpty())
            {
                // colored shader
                setShaderAmbient(shaderName, ambientBrightRGB, ambientDarkRGB, ambientSamples, ambientMaxDist);
            }
            else
            {
                // textured shader
                setShaderAmbientTexture(shaderName, ambientTexture);
            }
        }
        else if (shaderType.equals("mirror"))
        {
            float[] mirrorColorRGB = getRGBInput("mirror.color.RGB");
            
            setShaderMirror(shaderName, mirrorColorRGB);
        }
        else if (shaderType.equals("glass"))
        {
            float glassEta = getFloatInput("glass.eta");
            float[] glassColor = getRGBInput("glass.color.RGB");
            float glassAbsorptionDistance = getFloatInput("glass.absorption.distance");
            float[] glassAbsorptionColor = getRGBInput("glass.absorption.color.RGB");   
            
            setShaderGlass(shaderName, glassEta, glassColor, glassAbsorptionDistance, glassAbsorptionColor);
        }
        else if (shaderType.equals("shiny"))
        {
            float[] shinyDiffuseColor = getRGBInput("shiny.diffuse.color.RGB");
            String shinyTexture = getTextInput("shiny.texture");
            float shinyValue = getFloatInput("shiny.value");

            if (shinyTexture.isEmpty())
            {
                // colored shader
                setShaderShiny(shaderName, shinyDiffuseColor, shinyValue);
            }
            else
            {
                // textured shader
                setShaderShinyTexture(shaderName, shinyTexture, shinyValue);
            }
        }
        else if (shaderType.equals("ward"))
        {
            float[] wardDiffuseColor = getRGBInput("ward.diffuse.color.RGB");
            String wardTexture = getTextInput("ward.texture");
            float[] wardSpecularColor = getRGBInput("ward.specular.color.RGB");
            float wardRoughnessX = getFloatInput("ward.roughnessX");
            float wardRoughnessY = getFloatInput("ward.roughnessY");
            int wardSamples = getIntegerInput("ward.samples");         
            
            if (wardTexture.isEmpty()) {
                setShaderWard(shaderName, wardDiffuseColor, wardSpecularColor, wardRoughnessX, wardRoughnessY, wardSamples);
            }
            else {
                setShaderWardTexture(shaderName, wardTexture, wardSpecularColor, wardRoughnessX, wardRoughnessY, wardSamples);
            }
        }
        else if (shaderType.equals("constant"))
        {
            float[] constantColor = getRGBInput("constant.color.RGB");
            setShaderConstant(shaderName, constantColor);
        }        
        else if (shaderType.equals("uber"))
        {
            float[] uberDiffuseColor = getRGBInput("uber.diffuse.color.RGB");
            String uberDiffuseTexture = getTextInput("uber.diffuse.texture");
            float uberDiffuseBlend = getFloatInput("uber.diffuse.blend");
            float[] uberSpecularColor = getRGBInput("uber.specular.color.RGB");
            String uberSpecularTexutre =  getTextInput("uber.specular.texture");
            float uberSpecularBlend = getFloatInput("uber.specular.blend");
            float uberGlossyness = getFloatInput("uber.glossyness");
            int uberSamples = getIntegerInput("uber.samples");     
            setShaderUber(shaderName, uberDiffuseColor, uberDiffuseTexture, uberDiffuseBlend,
                    uberSpecularColor, uberSpecularTexutre, uberSpecularBlend,
                    uberGlossyness, uberSamples);
        }
        else if (shaderType.equals("view_caustics"))
        {
            sun.shader(shaderName, "view_caustics");
        }
        else if (shaderType.equals("view_irradiance"))
        {
            sun.shader(shaderName, "view_irradiance");
        }
        else if (shaderType.equals("view_global"))
        {
            sun.shader(shaderName, "view_global");
        }
       
/*        
        // ---------------------------------------------------------------------
        // MODIFIER
        
        sun.parameter("texture", p.getNextToken());
        sun.parameter("scale", p.getNextFloat());
        sun.modifier(name, "bump_map");

        sun.parameter("texture", p.getNextToken());
        sun.modifier(name, "normal_map");

        sun.parameter("function", p.getNextInt());
        sun.parameter("size", p.getNextFloat());
        sun.parameter("scale", p.getNextFloat());
        sun.modifier(name, "perlin");        
        

        
        // ---------------------------------------------------------------------
        // OBJECT
        
        // these are the parameters to be passed to the instance
        sun.parameter("accel", p.getNextToken());
            
        // mesh
        sun.parameter("triangles", triangles);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("normals", "vector", "vertex", normals);
        sun.parameter("uvs", "texcoord", "vertex", uvs);
        sun.geometry(name, "triangle_mesh");    
        
        // flat-mesh
        sun.parameter("triangles", triangles);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("uvs", "texcoord", "vertex", uvs);
        sun.geometry(name, "triangle_mesh");            
            
        // sphere
        sun.parameter("transform", Matrix4.translation(x, y, z).multiply(Matrix4.scale(radius)));
        sun.parameter("shaders", shaders);
        sun.parameter("modifiers", modifiers);
        sun.instance(name + ".instance", name);
            
        // cylinder
        sun.geometry(name, "cylinder");           
            
        // banchoff
        sun.geometry(name, "banchoff");            
            
        // torus
        sun.parameter("radiusInner", p.getNextFloat());
        sun.parameter("radiusOuter", p.getNextFloat());
        sun.geometry(name, "torus");            
            
        // sphereflake
        sun.parameter("level", p.getNextInt());
        sun.parameter("axis", parseVector());
        sun.parameter("radius", p.getNextFloat());
        sun.geometry(name, "sphereflake");            
            
        // plane
        sun.parameter("center", parsePoint());
        sun.parameter("normal", parseVector());
        // or
        sun.parameter("point1", parsePoint());
        sun.parameter("point2", parsePoint());
        sun.geometry(name, "plane");
            
        // generic-mesh
        sun.parameter("points", "point", "vertex", parseFloatArray(np * 3));
        sun.parameter("triangles", parseIntArray(nt * 3));    
        sun.parameter("normals", "vector", "vertex", parseFloatArray(np * 3));    
        sun.parameter("normals", "vector", "facevarying", parseFloatArray(nt * 9));
        sun.parameter("uvs", "texcoord", "vertex", parseFloatArray(np * 2));
        sun.parameter("uvs", "texcoord", "facevarying", parseFloatArray(nt * 6));
        sun.parameter("faceshaders", parseIntArray(nt));
        sun.geometry(name, "triangle_mesh");
        
        // hair
        sun.parameter("segments", p.getNextInt());
        sun.parameter("widths", p.getNextFloat());
        sun.parameter("points", "point", "vertex", parseFloatArray(p.getNextInt()));
        sun.geometry(name, "hair");
        
        // file-mesh
        sun.parameter("filename", p.getNextToken());
        sun.parameter("smooth_normals", p.getNextBoolean());
        sun.geometry(name, "file_mesh");
        
            
        // create instance
        sun.parameter("shaders", shaders);
        sun.parameter("modifiers", modifiers);
        sun.parameter("transform", transform[0]);
        sun.instance(name + ".instance", name);
*/        

/*        
        // plane
        sun.parameter("center", new Point3(0, -3, 0));
        sun.parameter("normal", new Point3(0, 1, 1));
        sun.geometry("plane1", "plane");        
        
        setShaderDiffuse("shader.floor", colorToFloatArray(Color.GRAY));

        sun.parameter("shaders", "shader.floor");
        //sun.parameter("modifiers", modifiers);
        //sun.parameter("transform", transform[0]);
        sun.instance("plane" + ".instance", "plane1");
*/        
        
        
        // ---------------------------------------------------------------------
        // LIGHT        
        
  
        String lightType = cbLightTypes.getSelectedItem().toString();
        String lightName = "light";
        if (lightType.equals("mesh"))
        {
            float[] meshRadianceColor = getRGBInput("mesh.radiance.color");
            int meshSamples = getIntegerInput("mesh.samples");
            //createTextInput(panel, "mesh.source", "Mesh Light Source", "");

            setLightMesh(lightName, meshRadianceColor, meshSamples);
        }
        else if (lightType.equals("point"))
        {
            Point3 pointCenter = getPointInput("point.center");
            float[] pointPower = getRGBInput("point.power");
            
            setLightPoint(lightName, pointCenter, pointPower);
        }
        else if (lightType.equals("spherical"))
        {
            float[] sphericalRadianceColor = getRGBInput("spherical.radiance.color");
            Point3 sphericalCenter = getPointInput("spherical.center");
            float sphericalRadius = getFloatInput("spherical.radius");
            int sphericalSamples = getIntegerInput("spherical.samples");            
            
            setLightSpherical(lightName, sphericalRadianceColor, sphericalCenter, sphericalRadius, sphericalSamples);
        }
        else if (lightType.equals("directional"))
        {
            Point3 directionalSource = getPointInput("directional.source");
            Point3 directionalTarget = getPointInput("directional.target");
            float directionalRadius = getFloatInput("directional.radius");
            float[] directionalRadiance = getRGBInput("directional.radiance.color");
            
            setLightDirectional(lightName, directionalSource, directionalTarget, directionalRadius, directionalRadiance);
        }
        else if (lightType.equals("ibl"))
        {
            String iblTexture = getTextInput("ibl.texture");
            Vector3 iblCenter = getVectorInput("ibl.center");
            Vector3 iblUp = getVectorInput("ibl.up");
            boolean iblFixed = getBooleanInput("ibl.fixed");
            int iblSamples = getIntegerInput("ibl.samples");
            int iblLowSamples = getIntegerInput("ibl.lowsamples");
            
            setLightIbl(lightName, iblTexture, iblCenter, iblUp, iblFixed, iblSamples, iblLowSamples);
        }
        else if (lightType.equals("meshlight"))
        {
            float[] meshlightRadiance = getRGBInput("meshlight.radiance");
            int meshlightSamples = getIntegerInput("meshlight.samples");    
            
            setLightMeshlight(lightName, meshlightRadiance, meshlightSamples);
        }
        else if (lightType.equals("sunsky"))
        {
            Vector3 sunskyUp = getVectorInput("sunsky.up");
            Vector3 sunskyEast = getVectorInput("sunsky.east");
            Vector3 sunskySundir = getVectorInput("sunsky.sundir");
            float sunskyTurbidity = getFloatInput("sunsky.turbidity");
            int sunskySamples = getIntegerInput("sunsky.samples");
            boolean sunskyGroundExtendsky = getBooleanInput("sunsky.ground.extendsky");
            float[] sunskyGroundColor = getRGBInput("sunsky.ground.color");            
            
            setLightSunsky(lightName, sunskyUp, sunskyEast, sunskySundir, sunskyTurbidity, sunskySamples, sunskyGroundExtendsky, sunskyGroundColor);
        }
        else if (lightType.equals("cornellbox"))
        {
            Point3 cornellboxCorner0 = getPointInput("cornellbox.corner0");
            Point3 cornellboxCorner1 = getPointInput("cornellbox.corner1");
            float[] cornellboxLeftColor = getRGBInput("cornellbox.leftColor");
            float[] cornellboxRightColor = getRGBInput("cornellbox.rightColor");
            float[] cornellboxTopColor = getRGBInput("cornellbox.topColor");
            float[] cornellboxBottomColor = getRGBInput("cornellbox.bottomColor");
            float[] cornellboxBackColor = getRGBInput("cornellbox.backColor");
            float[] cornellboxRadiance = getRGBInput("cornellbox.radiance");
            int cornellboxSamples = getIntegerInput("cornellbox.samples");
            
            setLightCornellbox(lightName, cornellboxCorner0, cornellboxCorner1, cornellboxLeftColor, cornellboxRightColor, 
                    cornellboxTopColor, cornellboxBottomColor, cornellboxBackColor, cornellboxRadiance, cornellboxSamples);
        }

        
        // shader
        
        //sun.parameter("depths.diffuse", 0.2f);
        //sun.parameter("depths.reflection", 0.1f);
        //sun.parameter("depths.refraction", 0);
//        sun.shader("default", "shiny_diffuse");     // shiny_phong

        // object - load from wavefront .obj file
        
//        float[] o = orientation;
//        Matrix4 M = new Matrix4(o[0], o[1], o[2], o[3], o[4], o[5], o[6], o[7], o[8], o[9], o[10], o[11]);
//        sun.parameter("filename", "C:\\Users\\ThomasL\\Documents\\NetBeansProjects\\VRL-Sunflow\\VRL-Sunflow\\teapot.obj");
//        sun.parameter("smooth_normals", true);
//        sun.geometry("teapot", "file_mesh");
//        sun.parameter("shaders", "default");
//        sun.parameter("transform", M);
//        sun.instance("teapot.instance", "teapot");    
        AddShape3DObject(sun, orientation, shapes.get(0));
        
        
        // options
        
        sun.parameter("camera", "camera_default");
        //sun.parameter("light", "light_default");
        //sun.parameter("resolutionX", 800);
        //sun.parameter("resolutionY", 450);
//        sun.parameter("resolutionX", 533);
//        sun.parameter("resolutionY", 300);
//        sun.parameter("aa.min", 0);
//        sun.parameter("aa.max", 1);
//        sun.parameter("filter", "triangle");
//        sun.parameter("sampler", "bucket");
        sun.options(SunflowAPI.DEFAULT_OPTIONS);
        
        
        
       

        
        
        
        
        
        
        //FileDisplay disp = new FileDisplay(true);
        //sun.render(sun.DEFAULT_OPTIONS, null);
        
        // start rendering in new thread for bucket rendering
        // without a own thread, image panel is first refreshed after rendering finished
        new Thread() 
        {
            @Override
            public void run() 
            {
                sun.render(SunflowAPI.DEFAULT_OPTIONS, imagePanel1);
                
                // INFOS
                org.sunflow.math.BoundingBox bb = sun.getBounds();
                labelBounds.setText(bb.toString());
                labelCenter.setText(bb.getCenter().toString());
                labelDiameter.setText(Float.toString(bb.getExtents().length()));
                
                btnRender.setEnabled(true);
                btnCancel.setEnabled(false);                
            }
            
        }.start();            
    }


    private void AddShape3DObject(SunflowAPI sun, float[] o, Shape3D shape)
    {
        String name = "test";

//      BUILD SIMPLE 3D OBJECT FOR TESTING
//        
//	VTriangleArray vTriangleArray = new VTriangleArray();		
//			
//	Node n1 = new Node(new Point3f(0f,0f,0f));
//        Node n2 = new Node(new Point3f(10f,0f,0f));
//        Node n3 = new Node(new Point3f(0f,10f,0f));
//        Node n4 = new Node(new Point3f(0f,0f,10f));
//
//        vTriangleArray.addTriangle(new Triangle(1,n1,n2,n3));
//        vTriangleArray.addTriangle(new Triangle(2,n1,n2,n4));
//        vTriangleArray.addTriangle(new Triangle(3,n1,n3,n4));
//        vTriangleArray.addTriangle(new Triangle(4,n2,n3,n4));    
//        
//	VGeometry3D geometry = new VGeometry3D(vTriangleArray, Color.black, Color.green, 1F, false);
//        
//        Shape3DArray shape3DArray = geometry.generateShape3DArray();        

        
        TriangleArray triangleArray = (TriangleArray) shape.getGeometry();
        //TriangleArray triangleArray = (TriangleArray) shape3DArray.get(0).getGeometry();
        
        
        int numVertices = triangleArray.getVertexCount();
        int numTriangles = triangleArray.getVertexCount() / 3;   
        float[] points = new float[numVertices * 3];
        int[] triangles = new int[numTriangles * 3];
        
        if (triangleArray != null)
        {
            System.out.println("VertexCount " + triangleArray.getVertexCount());
            for (int i = 0; i < triangleArray.getVertexCount(); i++)
            {
                Point3f p = new Point3f();
                triangleArray.getCoordinate(i, p);
                points[i * 3] = p.x;
                points[i * 3 + 1] = p.y;
                points[i * 3 + 2] = p.z;
                
                triangles[i] = i;
            }
        }
        

        sun.parameter("triangles", triangles);
        sun.parameter("points", "point", "vertex", points);
        //sun.parameter("normals", "vector", "vertex", normals);
        //sun.parameter("uvs", "texcoord", "vertex", uvs);
        sun.geometry(name, "triangle_mesh");


        // create instance
        sun.parameter("shaders", "default");
        //sun.parameter("modifiers", modifiers);
        //sun.parameter("transform", transform[0]);
        Matrix4 M = new Matrix4(o[0], o[1], o[2], o[3], o[4], o[5], o[6], o[7], o[8], o[9], o[10], o[11]);
        sun.parameter("transform", M);        
        sun.instance(name + ".instance", name);	        
        
        
    }

    private void setImageParameter(int resX, int resY, String sampler, float aaMin, 
            float aaMax, int aaSamples, float aaContrast, String filter,
            boolean aaJitter, boolean aaCache) 
    {
        sun.parameter("resolutionX", resX);
        sun.parameter("resolutionY", (int)(resX / 1.77f));
        //sun.parameter("resolutionY", resY);
        
        
        // SAMPLER (package org.sunflow.core.renderer.*)
        // =======
        // bucket      BucketRenderer
        // ipr         ProgressiveRenderer
        // fast        SimpleRenderer
        // multipass   MultipassRenderer
        sun.parameter("sampler", sampler);
        sun.parameter("aa.min", aaMin);
        sun.parameter("aa.max", aaMax);        
        sun.parameter("aa.samples", aaSamples);
        sun.parameter("aa.contrast", aaContrast);
        // FILTER (package org.sunflow.core.filter.*)
        // =======
        // box
        // triangle
        // gaussian
        // blackman-harris
        // sinc
        // mitchell 
        // catmull-rom 
        // lanczos 
        // bspline 
        sun.parameter("filter", filter);

        sun.parameter("depths.diffuse", 2);
        sun.parameter("depths.reflection", 2);
        sun.parameter("depths.refraction", 2);        
        
        sun.parameter("aa.jitter", aaJitter);
        sun.parameter("aa.cache", aaCache);
        sun.options(SunflowAPI.DEFAULT_OPTIONS);
    }
    
    
    private void setShaderDiffuse(String shaderName, float[] rgb)
    {
        sun.parameter("diffuse", null, rgb);
        sun.shader(shaderName, "diffuse");
    }
    
    private void setShaderDiffuseTextured(String shaderName, String texture)
    {
        sun.parameter("texture", texture);
        sun.shader(shaderName, "textured_diffuse");    
    }
    
    private void setShaderPhong(String shaderName, float[] diffuseRGB, float[] specularRGB, float power, int samples)
    {
        sun.parameter("diffuse", null, diffuseRGB);
        sun.parameter("specular", null, specularRGB);
        sun.parameter("power", power);
        sun.parameter("samples", samples);
        sun.shader(shaderName, "phong");
    }
    
    private void setShaderPhongTextured(String shaderName, String texture, float[] specularRGB, float power, int samples)
    {
        sun.parameter("texture", texture);
        sun.parameter("specular", null, specularRGB);
        sun.parameter("power", power);
        sun.parameter("samples", samples);
        sun.shader(shaderName, "textured_phong");        
    }    
    
    private void setShaderAmbient(String shaderName, float[] brightRGB, float[] darkRGB, int samples, float maxdist)
    {
        sun.parameter("bright", null, brightRGB);
        sun.parameter("dark", null, darkRGB);
        sun.parameter("samples", samples);
        sun.parameter("maxdist", maxdist);
        sun.shader(shaderName, "ambient_occlusion");
    }

    private void setShaderAmbientTexture(String shaderName, String texture)
    {
        sun.parameter("texture", texture);
        sun.shader(shaderName, "textured_ambient_occlusion");        
    }    
    
    private void setShaderMirror(String shaderName, float[] color)
    {
        sun.parameter("color", null, color);
        sun.shader(shaderName, "mirror");
    }
    
    private void setShaderGlass(String shaderName, float eta, float[] color, float absorptionDistance, float[] absorptionColor)
    {
        sun.parameter("eta", eta);
        sun.parameter("color", null, color);
        sun.parameter("absorption.distance", absorptionDistance);
        sun.parameter("absorption.color", null, absorptionColor);
        sun.shader(shaderName, "glass");        
    }

    private void setShaderShiny(String shaderName, float[] color, float shiny)
    {
        sun.parameter("diffuse", null, color);
        sun.parameter("shiny", shiny);   // reflection
        sun.shader(shaderName, "shiny_diffuse");
    }

    private void setShaderShinyTexture(String shaderName, String texture, float shiny)
    {
        sun.parameter("texture", texture);
        sun.parameter("shiny", shiny);   // reflection
        sun.shader(shaderName, "textured_shiny_diffuse");        
    }
    
    private void setShaderWard(String shaderName, float[] diffuseColor, float[] specularColor, float roughnessX, float roughnessY, int samples)
    {
        sun.parameter("diffuse", null, diffuseColor);
        sun.parameter("specular", null, specularColor);
        sun.parameter("roughnessX", roughnessX);
        sun.parameter("roughnessY", roughnessY);        
        sun.parameter("samples", samples);
        sun.shader(shaderName, "ward");
    }

    private void setShaderWardTexture(String shaderName, String texture, float[] specularColor, float roughnessX, float roughnessY, int samples)
    {
        sun.parameter("texture", texture);
        sun.parameter("specular", null, specularColor);
        sun.parameter("roughnessX", roughnessX);
        sun.parameter("roughnessY", roughnessY);        
        sun.parameter("samples", samples);
        sun.shader(shaderName, "textured_ward");      
    }    
    
    private void setShaderConstant(String shaderName, float[] color)
    {
        sun.parameter("color", null, color);
        sun.shader(shaderName, "constant");
    }
    
    private void setShaderUber(String shaderName, float[] diffuseColor, String diffuseTexture, float diffuseBlend,
            float[] specularColor, String specularTexture, float specularBlend, float glossyness, int samples)
    {
        sun.parameter("diffuse", null, diffuseColor);
        sun.parameter("diffuse.texture", diffuseTexture);
        sun.parameter("diffuse.blend", diffuseBlend);
        sun.parameter("specular", null, specularColor);
        sun.parameter("specular.texture", specularTexture);
        sun.parameter("specular.blend", specularBlend);
        sun.parameter("glossyness", glossyness);
        sun.parameter("samples", samples);
        sun.shader(shaderName, "uber");  
    }

    private void setLightMesh(String lightName, float[] color, int samples)
    {
        float[] points = new float[] {  0f, 3f, -5f,
                                        5f, 3f, 0f,
                                        -5f, 3f, 5f };
        int[] triangles = new int[] {   0, 1, 2 };
        
        sun.parameter("radiance", null, color);
        sun.parameter("samples", samples);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("triangles", triangles);
        sun.light(lightName, "triangle_mesh");       
    }
    
    private void setLightPoint(String lightName, Point3 center, float[] power)
    {
        sun.parameter("center", center);
        //sun.parameter("power", null, power);
        sun.parameter("power", null, new float[] { 20f, 20f, 20f} );
        sun.light(lightName, "point");             
    }
    
    private void setLightSpherical(String lightName, float[] radiance, Point3 center, float radius, int samples)
    {
        sun.parameter("radiance", null, radiance);
        sun.parameter("center", center);
        sun.parameter("radius", radius);
        sun.parameter("samples", samples);
        sun.light(lightName, "sphere");        
    }

    private void setLightDirectional(String lightName, Point3 source, Point3 target, float radius, float[] radiance)
    {
        sun.parameter("source", source);
        sun.parameter("dir", Point3.sub(target, source, new Vector3()));
        sun.parameter("radius", radius);
        sun.parameter("radiance", null, radiance);
        sun.light(lightName, "directional");
    }
    
    private void setLightIbl(String lightName, String texture, Vector3 center, Vector3 up, boolean fixed, int samples, int lowsamples)
    {
        sun.parameter("texture", texture);
        sun.parameter("center", center);
        sun.parameter("up", up);
        sun.parameter("fixed", fixed);
        sun.parameter("samples", samples);
        sun.parameter("lowsamples", lowsamples);
        sun.light(lightName, "ibl");
    }
    
    private void setLightMeshlight(String lightName, float[] color, int samples)
    {
        float[] points = new float[] {  0f, 3f, -5f,
                                        5f, 3f, 0f,
                                        -5f, 3f, 5f };
        int[] triangles = new int[] {   0, 1, 2 };        
        
        sun.parameter("radiance", null, color);
        sun.parameter("samples", samples);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("triangles", triangles);
        sun.light(lightName, "triangle_mesh");          
    }
    
    private void setLightSunsky(String lightName, Vector3 up, Vector3 east, Vector3 sundir, float turbidity, int samples, boolean groundExtendsky, float[] groundColor)
    {
        sun.parameter("up", up);
        sun.parameter("east", east);
        sun.parameter("sundir", sundir);
        sun.parameter("turbidity", turbidity);
        sun.parameter("samples", samples);
        sun.parameter("ground.extendsky", groundExtendsky);
        sun.parameter("ground.color", null, groundColor);
        sun.light(lightName, "sunsky");        
    }
    
    private void setLightCornellbox(String lightName, Point3 corner0, Point3 corner1, 
            float[] leftColor, float[] rightColor, float[] topColor, 
            float[] bottomColor, float[] backColor, float[] radiance, int samples)
    {
        sun.parameter("corner0", corner0);
        sun.parameter("corner1", corner1);
        sun.parameter("leftColor", null, leftColor);
        sun.parameter("rightColor", null, rightColor);
        sun.parameter("topColor", null, topColor);
        sun.parameter("bottomColor", null, bottomColor);
        sun.parameter("backColor", null, backColor);
        sun.parameter("radiance", null, radiance);
        sun.parameter("samples", samples);
        sun.light(lightName, "cornell_box");
    }
    
    private void setCameraPinhole(String cameraName, float pinholeShutterOpen, 
            float pinholeShutterClose, float pinholeFov, float pinholeAspect, 
            float pinholeShiftX, float pinholeShiftY) 
    {
        sun.parameter("shutter.open", pinholeShutterOpen);
        sun.parameter("shutter.close", pinholeShutterClose);
        sun.parameter("fov", pinholeFov);
        sun.parameter("aspect", pinholeAspect);
        sun.parameter("shift.x", pinholeShiftX);
        sun.parameter("shift.y", pinholeShiftY);
        sun.camera(cameraName, "pinhole");    
    }

    private void setCameraThinlens(String cameraName, float thinlensShutterOpen, 
            float thinlensShutterClose, float thinlensFov, float thinlensAspect, 
            float thinlensShiftX, float thinlensShiftY, float thinlensFocusDistance, 
            float thinlensLensRadius, float thinlensLensSides, 
            float thinlensLensRotation) 
    {
        sun.parameter("shutter.open", thinlensShutterOpen);
        sun.parameter("shutter.close", thinlensShutterClose);
        sun.parameter("fov", thinlensFov);
        sun.parameter("aspect", thinlensAspect);
        sun.parameter("shift.x", thinlensShiftX);
        sun.parameter("shift.y", thinlensShiftY);
        sun.parameter("focus.distance", thinlensFocusDistance);
        sun.parameter("lens.radius", thinlensLensRadius);
        sun.parameter("lens.sides", thinlensLensSides);
        sun.parameter("lens.rotation", thinlensLensRotation);
        sun.camera(cameraName, "thinlens");
    }

    private void setCameraSpherical(String cameraName, float sphericalShutterOpen, 
            float sphericalShutterClose) 
    {
        sun.parameter("shutter.open", sphericalShutterOpen);
        sun.parameter("shutter.close", sphericalShutterClose);
        sun.camera(cameraName, "spherical");
    }

    private void setCameraFisheye(String cameraName, float fisheyeShutterOpen, 
            float fisheyeShutterClose) 
    {
        sun.parameter("shutter.open", fisheyeShutterOpen);
        sun.parameter("shutter.close", fisheyeShutterClose);
        sun.camera(cameraName, "fisheye");
    }    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="gui">
    
    ////////////////////////////////////////////////////////////////////////////
    //                                   G U I 
    ////////////////////////////////////////////////////////////////////////////
    
    
    // contains all input controls with a unique name
    private HashMap<String, Object> dict = new HashMap<String, Object>();
    
    private String[] shaders = new String[] { 
        "diffuse",
        "phong",
        "ambient",
        "mirror",
        "glass",
        "shiny",
        "ward",
        "constant",
        "uber",
        "view_caustics",
        "view_irradiance",
        "view_global"
    };
    
    private String[] lights = new String[] { 
        "mesh", 
        "point",
        "spherical",
        "directional",
        "ibl",
        "meshlight",
        "sunsky",
        "cornellbox"
    };
    
    private String[] cameras = new String[] { 
        "pinhole",
        "thinlens",
        "spherical",
        "fisheye"
    };    
    
    private HashMap<String, JPanel> shaderPanels = new HashMap<String, JPanel>();
    private HashMap<String, JPanel> lightPanels = new HashMap<String, JPanel>();
    private HashMap<String, JPanel> cameraPanels = new HashMap<String, JPanel>();
    private JPanel currentShaderPanel = null;
    private JPanel currentLightPanel = null;
    private JPanel currentCameraPanel = null;
            
    private void buildGUI()
    {
        JPanel panel;

        // IMAGE

        panelImageSettings.setLayout(new BorderLayout());
        panel = new JPanel(new SpringLayout());
        createResolutionInput(panel, "image.resolution", "Resolution", 533, 300);
        createComboBox(panel, "image.sampler", "Sampler", new String[] {"bucket", "ipr", "fast", "multipass"});
        createFloatInput(panel, "image.aa.min", "aa.min", 0f);
        createFloatInput(panel, "image.aa.max", "aa.max", 1f);
        createIntegerInput(panel, "image.aa.samples", "aa.samples", 4);
        createFloatInput(panel, "image.aa.contrast", "aa.contrast", 0.1f);
        createComboBox(panel, "image.filter", "filter", new String[] {"triangle", "gaussian", "box", "blackman-harris", "sinc", "mitchell", "catmull-rom", "lanczos", "bspline"});
        createBooleanInput(panel, "image.jitter", "jitter", false);
        createBooleanInput(panel, "image.cache", "cache", false);
        SpringUtilities.makeCompactGrid(panel, 9, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelImageSettings.add(panel, BorderLayout.NORTH);

        // Background

        panelBackgroundSettings.setLayout(new BorderLayout());
        panel = new JPanel(new SpringLayout());
        createRGBInput(panel, "background.color", "Color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 1, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelBackgroundSettings.add(panel, BorderLayout.NORTH);
        
        // SHADER

        dict.put("shader.type", cbShaderTypes);
        cbShaderTypes.setModel(new DefaultComboBoxModel(shaders));
        cbShaderTypes.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String shaderType = cbShaderTypes.getSelectedItem().toString();
                ChangeShaderSettingsPanel(shaderType);
            }
        });
        panelShaderSettings.setLayout(new BorderLayout());
        for (String name: shaders)
        {
            panel = new JPanel();
            panel.setLayout(new SpringLayout());
            shaderPanels.put(name, panel);
        }
        
        panel = shaderPanels.get("diffuse");
        createRGBInput(panel, "diffuse.rgb", "RGB", colorToFloatArray(new Color(0x6699FF)));
        createTextInput(panel, "diffuse.texture", "Texture", "");
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelShaderSettings.add(panel, BorderLayout.NORTH);
        currentShaderPanel = panel;


        panel = shaderPanels.get("phong");
        createRGBInput(panel, "phong.diffuse.rgb", "diffuse RGB", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "phong.texture", "Texture", "");
        createRGBInput(panel, "phong.specular.rgb", "specular RGB", colorToFloatArray(Color.WHITE));
        createFloatInput(panel, "phong.power", "power", 0.1f);
        createIntegerInput(panel, "phong.samples", "samples", 10);
        SpringUtilities.makeCompactGrid(panel, 5, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("ambient");
        createRGBInput(panel, "ambient.bright.RGB", "Bright RGB", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "ambient.texture", "Texture", "");
        createRGBInput(panel, "ambient.dark.RGB", "Dark RGB", colorToFloatArray(Color.BLACK));
        createIntegerInput(panel, "ambient.samples", "Samples", 10);
        createFloatInput(panel, "ambient.maxdist", "MaxDist", 0.5f);
        SpringUtilities.makeCompactGrid(panel, 5, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("mirror");
        createRGBInput(panel, "mirror.color.RGB", "Color RGB", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 1, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = shaderPanels.get("glass");
        createFloatInput(panel, "glass.eta", "Eta", 1f);
        createRGBInput(panel, "glass.color.RGB", "Color", colorToFloatArray(Color.WHITE));
        createFloatInput(panel, "glass.absorption.distance", "Absorption distance", 5f);
        createRGBInput(panel, "glass.absorption.color.RGB", "Absorption Color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 4, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("shiny");
        createRGBInput(panel, "shiny.diffuse.color.RGB", "Color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "shiny.texture", "Texture", "");
        createFloatInput(panel, "shiny.value", "Shiny", 0f);
        SpringUtilities.makeCompactGrid(panel, 3, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("ward");
        createRGBInput(panel, "ward.diffuse.color.RGB", "Diffuse color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "ward.texture", "Texture", "");
        createRGBInput(panel, "ward.specular.color.RGB", "Specular color", colorToFloatArray(Color.WHITE));
        createFloatInput(panel, "ward.roughnessX", "roughnessX", 0f);
        createFloatInput(panel, "ward.roughnessY", "roughnessY", 0f);
        createIntegerInput(panel, "ward.samples", "Samples", 10);
        SpringUtilities.makeCompactGrid(panel, 6, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = shaderPanels.get("constant");
        createRGBInput(panel, "constant.color.RGB", "Color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 1, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = shaderPanels.get("uber");
        createRGBInput(panel, "uber.diffuse.color.RGB", "Diffuse color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "uber.diffuse.texture", "Diffuse texture", "");
        createFloatInput(panel, "uber.diffuse.blend", "Diffuse blend", 0f);
        createRGBInput(panel, "uber.specular.color.RGB", "Specular color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "uber.specular.texture", "Specular texture", "");
        createFloatInput(panel, "uber.specular.blend", "Specular blend", 0f);
        createFloatInput(panel, "uber.glossyness", "Glossyness", 0f);
        createIntegerInput(panel, "uber.samples", "Samples", 10);
        SpringUtilities.makeCompactGrid(panel, 8, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        // ---------------------------------------------------------------------
        // LIGHT
        
        dict.put("light.type", cbLightTypes);
        cbLightTypes.setModel(new DefaultComboBoxModel(lights));
        cbLightTypes.setSelectedItem("sunsky");
        cbLightTypes.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String lightType = cbLightTypes.getSelectedItem().toString();
                ChangeLightSettingsPanel(lightType);
            }
        });
        panelLightSettings.setLayout(new BorderLayout());
        for (String name: lights)
        {
            panel = new JPanel();
            panel.setLayout(new SpringLayout());
            lightPanels.put(name, panel);
        }
        
        panel = lightPanels.get("mesh");
        createRGBInput(panel, "mesh.radiance.color", "RGB", colorToFloatArray(Color.WHITE));
        createIntegerInput(panel, "mesh.samples", "Samples", 4);
        createTextInput(panel, "mesh.source", "Mesh Light Source", "");
        SpringUtilities.makeCompactGrid(panel, 3, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelLightSettings.add(panel, BorderLayout.NORTH);
        currentLightPanel = panel;        
    
        panel = lightPanels.get("point");
        createPointInput(panel, "point.center", "Center (xyz)", new Point3(0, 2.4f, 1f));
        createRGBInput(panel, "point.power", "Power", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = lightPanels.get("spherical");
        createRGBInput(panel, "spherical.radiance.color", "Radiance color", colorToFloatArray(Color.WHITE));
        createPointInput(panel, "spherical.center", "Center (xyz)", new Point3(0, 2.4f, 1f));
        createFloatInput(panel, "spherical.radius", "Radius", 1f);
        createIntegerInput(panel, "spherical.samples", "Samples", 64);
        SpringUtilities.makeCompactGrid(panel, 4, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = lightPanels.get("directional");
        createPointInput(panel, "directional.source", "Source (xyz)", new Point3(0, 2.4f, 1f));
        createPointInput(panel, "directional.target", "Target (xyz)", new Point3(0, 0f, 0f));
        createFloatInput(panel, "directional.radius", "Radius", 6f);
        createRGBInput(panel, "directional.radiance.color", "Radiance color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 4, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad        

        panel = lightPanels.get("ibl");
        createTextInput(panel, "ibl.texture", "texture", "");
        createVectorInput(panel, "ibl.center", "center", new Vector3(0, 2.4f, 1f));
        createVectorInput(panel, "ibl.up", "up", new Vector3(0, 1f, 0f));
        createBooleanInput(panel, "ibl.fixed", "fixed", false);
        createIntegerInput(panel, "ibl.samples", "samples", 4);
        createIntegerInput(panel, "ibl.lowsamples", "lowsamples", 4);
        SpringUtilities.makeCompactGrid(panel, 6, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad           

        panel = lightPanels.get("meshlight");
        createRGBInput(panel, "meshlight.radiance", "radiance color", colorToFloatArray(Color.WHITE));
        createIntegerInput(panel, "meshlight.samples", "Samples", 4);
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad           

        panel = lightPanels.get("sunsky");
        createVectorInput(panel, "sunsky.up", "center", new Vector3(0, 1, 0));
        createVectorInput(panel, "sunsky.east", "east", new Vector3(0, 0, 1));
        createVectorInput(panel, "sunsky.sundir", "sundir", new Vector3(1, 1, 1));
        createFloatInput(panel, "sunsky.turbidity", "turbidity", 4f);
        createIntegerInput(panel, "sunsky.samples", "samples", 64);
        createBooleanInput(panel, "sunsky.ground.extendsky", "ground.extendsky", false);
        createRGBInput(panel, "sunsky.ground.color", "ground.color", colorToFloatArray(new Color(0x666666)));
        SpringUtilities.makeCompactGrid(panel, 7, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad 
        
        panel = lightPanels.get("cornellbox");
        createPointInput(panel, "cornellbox.corner0", "corner0", new Point3(0, 2.4f, 1f));
        createPointInput(panel, "cornellbox.corner1", "corner1", new Point3(0, 2.4f, 1f));
        createRGBInput(panel, "cornellbox.leftColor", "leftColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.rightColor", "rightColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.topColor", "topColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.bottomColor", "bottomColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.backColor", "backColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.radiance", "radiance", colorToFloatArray(Color.WHITE));
        createIntegerInput(panel, "cornellbox.samples", "samples", 4);
        SpringUtilities.makeCompactGrid(panel, 8, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad 
        
        
        
        // ---------------------------------------------------------------------
        // CAMERA
        
        dict.put("camera.type", cbCameraTypes);
        cbCameraTypes.setModel(new DefaultComboBoxModel(cameras));
        cbCameraTypes.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String cameraType = cbCameraTypes.getSelectedItem().toString();
                ChangeCameraSettingsPanel(cameraType);
            }
        });
        panelCameraSettings.setLayout(new BorderLayout());
        for (String name: cameras)
        {
            panel = new JPanel();
            panel.setLayout(new SpringLayout());
            cameraPanels.put(name, panel);
        }
        
        panel = cameraPanels.get("pinhole");
        createFloatInput(panel, "pinhole.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "pinhole.shutter.close", "shutter.close", 0f);
        createFloatInput(panel, "pinhole.fov", "fov", 25f);
        createFloatInput(panel, "pinhole.aspect", "aspect", 1.777f);
        createFloatInput(panel, "pinhole.shift.x", "shift.x", 0f);
        createFloatInput(panel, "pinhole.shift.y", "shift.y", 0f);
        SpringUtilities.makeCompactGrid(panel, 6, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelCameraSettings.add(panel, BorderLayout.NORTH);
        currentCameraPanel = panel;        
        
        panel = cameraPanels.get("thinlens");
        createFloatInput(panel, "thinlens.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "thinlens.shutter.close", "shutter.close", 0f);
        createFloatInput(panel, "thinlens.fov", "fov", 20f);
        createFloatInput(panel, "thinlens.aspect", "aspect", 1.777f);
        createFloatInput(panel, "thinlens.shift.x", "shift.x", 0f);
        createFloatInput(panel, "thinlens.shift.y", "shift.y", 0f);
        createFloatInput(panel, "thinlens.focus.distance", "focus.distance", 1f);
        createFloatInput(panel, "thinlens.lens.radius", "lens.radius", 1f);
        createIntegerInput(panel, "thinlens.lens.sides", "lens.sides", 1);
        createFloatInput(panel, "thinlens.lens.rotation", "lens.rotation", 0f);
        SpringUtilities.makeCompactGrid(panel, 10, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        tab5.add(panel, BorderLayout.NORTH);
        
        panel = cameraPanels.get("spherical");
        createFloatInput(panel, "spherical.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "spherical.shutter.close", "shutter.close", 0f);
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        tab5.add(panel, BorderLayout.NORTH);
        
        panel = cameraPanels.get("fisheye");
        createFloatInput(panel, "fisheye.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "fisheye.shutter.close", "shutter.close", 0f);
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        tab5.add(panel, BorderLayout.NORTH);
    }
    
    
    public SunflowSettings getSunflowSettings()
    {
        SunflowSettings result = new SunflowSettings();
        
        // image
        
        result.ImageResolutionX = getResolutionInput("image.resolution")[0];
        result.ImageResolutionY = getResolutionInput("image.resolution")[1];
        result.ImageSampler = getComboBoxInput("image.sampler");
        result.ImageAaMin = getFloatInput("image.aa.min");
        result.ImageAaMax = getFloatInput("image.aa.max");
        result.ImageAaSamples = getIntegerInput("image.aa.samples");
        result.ImageAaContrast = getFloatInput("image.aa.contrast");
        result.ImageFilter = getComboBoxInput("image.filter");
        result.ImageJitter = getBooleanInput("image.jitter");
        result.ImageCache = getBooleanInput("image.cache");
        
        // background
        
        result.BackgroundColor = getRGBInput("background.color");
  
        // shader
        
        result.ShaderType = getComboBoxInput("shader.type");
        result.ShaderDiffuseRGB = getRGBInput("diffuse.rgb");
        result.ShaderDiffuseTexture = getTextInput("diffuse.texture");
        result.ShaderPhongDiffuseRGB = getRGBInput("phong.diffuse.rgb");
        result.ShaderPhongTexture = getTextInput("phong.texture");
        result.ShaderPhongSpecularRGB = getRGBInput("phong.specular.rgb");
        result.ShaderPhongPower = getFloatInput("phong.power");
        result.ShaderPhongSamples = getIntegerInput("phong.samples");
        
        result.ShaderAmbientBrightRGB = getRGBInput("ambient.bright.RGB");
        result.ShaderAmbientTexture = getTextInput("ambient.texture");
        result.ShaderAmbientDarkRGB = getRGBInput("ambient.dark.RGB");
        result.ShaderAmbientSamples = getIntegerInput("ambient.samples");
        result.ShaderAmbientMaxDist = getFloatInput("ambient.maxdist");
        
        result.ShaderMirrorColorRGB = getRGBInput("mirror.color.RGB");

        result.ShaderGlassEta = getFloatInput("glass.eta");
        result.ShaderGlassColorRGB = getRGBInput("glass.color.RGB");
        result.ShaderGlassAbsorptionDistance = getFloatInput("glass.absorption.distance");
        result.ShaderGlassAbsorptionColorRGB = getRGBInput("glass.absorption.color.RGB");

        result.ShaderShinyDiffuseColorRGB = getRGBInput("shiny.diffuse.color.RGB");
        result.ShaderShinyTexture = getTextInput("shiny.texture");
        result.ShaderShinyValue = getFloatInput("shiny.value");

        result.ShaderWardDiffuseColorRGB = getRGBInput("ward.diffuse.color.RGB");
        result.ShaderWardTexture = getTextInput("ward.texture");
        result.ShaderWardSpecularColorRGB = getRGBInput("ward.specular.color.RGB");
        result.ShaderWardRoughnessX = getFloatInput("ward.roughnessX");
        result.ShaderWardRoughnessY = getFloatInput("ward.roughnessY");
        result.ShaderWardSamples = getIntegerInput("ward.samples");

        result.ShaderConstantColorRGB = getRGBInput("constant.color.RGB");

        result.ShaderUberDiffuseColorRGB = getRGBInput("uber.diffuse.color.RGB");
        result.ShaderUberDiffuseTexture = getTextInput("uber.diffuse.texture");
        result.ShaderUberDiffuseBlend = getFloatInput("uber.diffuse.blend");
        result.ShaderUberSpecularColorRGB = getRGBInput("uber.specular.color.RGB");
        result.ShaderUberSpecularTexture = getTextInput("uber.specular.texture");
        result.ShaderUberSpecularBlend = getFloatInput("uber.specular.blend");
        result.ShaderUberGlossyness = getFloatInput("uber.glossyness");
        result.ShaderUberSamples = getIntegerInput("uber.samples");

        // light
        
        result.LightType = getComboBoxInput("light.type");

        result.LightMeshRadianceColor = getRGBInput("mesh.radiance.color");
        result.LightMeshSamples = getIntegerInput("mesh.samples");
        result.LightMeshSource = getTextInput("mesh.source");

        result.LightPointCenter = getPointInput("point.center");
        result.LightPointPower = getRGBInput("point.power");

        result.LightSphericalRadianceColor = getRGBInput("spherical.radiance.color");
        result.LightSphericalCenter = getPointInput("spherical.center");
        result.LightSphericalRadius = getFloatInput("spherical.radius");
        result.LightSphericalSamples = getFloatInput("spherical.samples");

        result.LightDirectionalSource = getPointInput("directional.source");
        result.LightDirectionalTarget = getPointInput("directional.target");
        result.LightDirectionalRadius = getFloatInput("directional.radius");
        result.LightDirectionalRadianceColor = getRGBInput("directional.radiance.color");

        result.LightIblTexture = getTextInput("ibl.texture");
        result.LightIblCenter = getVectorInput("ibl.center");
        result.LightIblUp = getVectorInput("ibl.up");
        result.LightIblFixed = getBooleanInput("ibl.fixed");
        result.LightIblSamples = getIntegerInput("ibl.samples");
        result.LightIblLowsamples = getIntegerInput("ibl.lowsamples");

        result.LightMeshlightRadiance = getRGBInput("meshlight.radiance");
        result.LightMeshlightSamples = getIntegerInput("meshlight.samples");

        result.LightSunskyUp = getVectorInput("sunsky.up");
        result.LightSunskyEast = getVectorInput("sunsky.east");
        result.LightSunskySundir = getVectorInput("sunsky.sundir");
        result.LightSunskyTurbidity = getFloatInput("sunsky.turbidity");
        result.LightSunskySamples = getIntegerInput("sunsky.samples");
        result.LightSunskyGroundExtendsky = getBooleanInput("sunsky.ground.extendsky");
        result.LightSunskyGroundColor = getRGBInput("sunsky.ground.color");

        result.LightCornellboxCorner0 = getPointInput("cornellbox.corner0");
        result.LightCornellboxCorner1 = getPointInput("cornellbox.corner1");
        result.LightCornellboxLeftColor = getRGBInput("cornellbox.leftColor");
        result.LightCornellboxRightColor = getRGBInput("cornellbox.rightColor");
        result.LightCornellboxTopColor = getRGBInput("cornellbox.topColor");
        result.LightCornellboxBottomColor = getRGBInput("cornellbox.bottomColor");
        result.LightCornellboxBackColor = getRGBInput("cornellbox.backColor");
        result.LightCornellboxRadiance = getRGBInput("cornellbox.radiance");
        result.LightCornellboxSamples = getIntegerInput("cornellbox.samples");

        // camera
        
        result.CameraType = ("camera.type");
        
        result.CameraPinholeShutterOpen = getFloatInput("pinhole.shutter.open");
        result.CameraPinholeShutterClose = getFloatInput("pinhole.shutter.close");
        result.CameraPinholeFov = getFloatInput("pinhole.fov");
        result.CameraPinholeAspect = getFloatInput("pinhole.aspect");
        result.CameraPinholeShiftX = getFloatInput("pinhole.shift.x");
        result.CameraPinholeShiftY = getFloatInput("pinhole.shift.y");

        result.CameraThinlensShutterOpen = getFloatInput("thinlens.shutter.open");
        result.CameraThinlensShutterClose = getFloatInput("thinlens.shutter.close");
        result.CameraThinlensFov = getFloatInput("thinlens.fov");
        result.CameraThinlensAspect = getFloatInput("thinlens.aspect");
        result.CameraThinlensShiftX = getFloatInput("thinlens.shift.x");
        result.CameraThinlensShiftY = getFloatInput("thinlens.shift.y");
        result.CameraThinlensFocusDistance = getFloatInput("thinlens.focus.distance");
        result.CameraThinlensLensRadius = getFloatInput("thinlens.lens.radius");
        result.CameraThinlensLensSides = getIntegerInput("thinlens.lens.sides");
        result.CameraThinlensLensRotation = getFloatInput("thinlens.lens.rotation");

        result.CameraSphericalShutterOpen = getFloatInput("spherical.shutter.open");
        result.CameraSphericalShutterClose = getFloatInput("spherical.shutter.close");

        result.CameraFisheyeShutterOpen = getFloatInput("fisheye.shutter.open");
        result.CameraFisheyeShutterClose = getFloatInput("fisheye.shutter.close");
        
        return result;
    }
    
    public void setSunflowSettings(SunflowSettings s)
    {
        // image
        
        setResolutionInput("image.resolution", s.ImageResolutionX, s.ImageResolutionY);
        setComboBoxInput("image.sampler", s.ImageSampler);
        setFloatInput("image.aa.min", s.ImageAaMin);
        setFloatInput("image.aa.max", s.ImageAaMax);
        setIntegerInput("image.aa.samples", s.ImageAaSamples);
        setFloatInput("image.aa.contrast", s.ImageAaContrast);
        setComboBoxInput("image.filter", s.ImageFilter);
        setBooleanInput("image.jitter", s.ImageJitter);
        setBooleanInput("image.cache", s.ImageCache);
        
        // background
        
        setRGBInput("background.color", s.BackgroundColor);
  
        // shader
        
        setComboBoxInput("shader.type", s.ShaderType);
        setRGBInput("diffuse.rgb", s.ShaderDiffuseRGB);
        setTextInput("diffuse.texture", s.ShaderDiffuseTexture);
        setRGBInput("phong.diffuse.rgb", s.ShaderPhongDiffuseRGB);
        setTextInput("phong.texture", s.ShaderPhongTexture);
        setRGBInput("phong.specular.rgb", s.ShaderPhongSpecularRGB);
        setFloatInput("phong.power", s.ShaderPhongPower);
        setIntegerInput("phong.samples", s.ShaderPhongSamples);
        
        setRGBInput("ambient.bright.RGB", s.ShaderAmbientBrightRGB);
        setTextInput("ambient.texture", s.ShaderAmbientTexture);
        setRGBInput("ambient.dark.RGB", s.ShaderAmbientDarkRGB);
        setIntegerInput("ambient.samples", s.ShaderAmbientSamples);
        setFloatInput("ambient.maxdist", s.ShaderAmbientMaxDist);
        
        setRGBInput("mirror.color.RGB", s.ShaderMirrorColorRGB);

        setFloatInput("glass.eta", s.ShaderGlassEta);
        setRGBInput("glass.color.RGB", s.ShaderGlassColorRGB);
        setFloatInput("glass.absorption.distance", s.ShaderGlassAbsorptionDistance);
        setRGBInput("glass.absorption.color.RGB", s.ShaderGlassAbsorptionColorRGB);

        setRGBInput("shiny.diffuse.color.RGB", s.ShaderShinyDiffuseColorRGB);
        setTextInput("shiny.texture", s.ShaderShinyTexture);
        setFloatInput("shiny.value", s.ShaderShinyValue);

        setRGBInput("ward.diffuse.color.RGB", s.ShaderWardDiffuseColorRGB);
        setTextInput("ward.texture", s.ShaderWardTexture);
        setRGBInput("ward.specular.color.RGB", s.ShaderWardSpecularColorRGB);
        setFloatInput("ward.roughnessX", s.ShaderWardRoughnessX);
        setFloatInput("ward.roughnessY", s.ShaderWardRoughnessY);
        setIntegerInput("ward.samples", s.ShaderWardSamples);

        setRGBInput("constant.color.RGB", s.ShaderConstantColorRGB);

        setRGBInput("uber.diffuse.color.RGB", s.ShaderUberDiffuseColorRGB);
        setTextInput("uber.diffuse.texture", s.ShaderUberDiffuseTexture);
        setFloatInput("uber.diffuse.blend", s.ShaderUberDiffuseBlend);
        setRGBInput("uber.specular.color.RGB", s.ShaderUberSpecularColorRGB);
        setTextInput("uber.specular.texture", s.ShaderUberSpecularTexture);
        setFloatInput("uber.specular.blend", s.ShaderUberSpecularBlend);
        setFloatInput("uber.glossyness", s.ShaderUberGlossyness);
        setIntegerInput("uber.samples", s.ShaderUberSamples);
        
        // light
        
        setComboBoxInput("light.type", s.LightType);

        setRGBInput("mesh.radiance.color", s.LightMeshRadianceColor);
        setIntegerInput("mesh.samples", s.LightMeshSamples);
        setTextInput("mesh.source", s.LightMeshSource);

        setPointInput("point.center", s.LightPointCenter);
        setRGBInput("point.power", s.LightPointPower);

        setRGBInput("spherical.radiance.color", s.LightSphericalRadianceColor);
        setPointInput("spherical.center", s.LightSphericalCenter);
        setFloatInput("spherical.radius", s.LightSphericalRadius);
        setFloatInput("spherical.samples", s.LightSphericalSamples);

        setPointInput("directional.source", s.LightDirectionalSource);
        setPointInput("directional.target", s.LightDirectionalTarget);
        setFloatInput("directional.radius", s.LightDirectionalRadius);
        setRGBInput("directional.radiance.color", s.LightDirectionalRadianceColor);

        setTextInput("ibl.texture", s.LightIblTexture);
        setVectorInput("ibl.center", s.LightIblCenter);
        setVectorInput("ibl.up", s.LightIblUp);
        setBooleanInput("ibl.fixed", s.LightIblFixed);
        setIntegerInput("ibl.samples", s.LightIblSamples);
        setIntegerInput("ibl.lowsamples", s.LightIblLowsamples);

        setRGBInput("meshlight.radiance", s.LightMeshlightRadiance);
        setIntegerInput("meshlight.samples", s.LightMeshlightSamples);

        setVectorInput("sunsky.up", s.LightSunskyUp);
        setVectorInput("sunsky.east", s.LightSunskyEast);
        setVectorInput("sunsky.sundir", s.LightSunskySundir);
        setFloatInput("sunsky.turbidity", s.LightSunskyTurbidity);
        setIntegerInput("sunsky.samples", s.LightSunskySamples);
        setBooleanInput("sunsky.ground.extendsky", s.LightSunskyGroundExtendsky);
        setRGBInput("sunsky.ground.color", s.LightSunskyGroundColor);

        setPointInput("cornellbox.corner0", s.LightCornellboxCorner0);
        setPointInput("cornellbox.corner1", s.LightCornellboxCorner1);
        setRGBInput("cornellbox.leftColor", s.LightCornellboxLeftColor);
        setRGBInput("cornellbox.rightColor", s.LightCornellboxRightColor);
        setRGBInput("cornellbox.topColor", s.LightCornellboxTopColor);
        setRGBInput("cornellbox.bottomColor", s.LightCornellboxBottomColor);
        setRGBInput("cornellbox.backColor", s.LightCornellboxBackColor);
        setRGBInput("cornellbox.radiance", s.LightCornellboxRadiance);
        setIntegerInput("cornellbox.samples", s.LightCornellboxSamples);
        
        // camera
        
        setComboBoxInput("camera.type", s.CameraType);
        
        setFloatInput("pinhole.shutter.open", s.CameraPinholeShutterOpen);
        setFloatInput("pinhole.shutter.close", s.CameraPinholeShutterClose);
        setFloatInput("pinhole.fov", s.CameraPinholeFov);
        setFloatInput("pinhole.aspect", s.CameraPinholeAspect);
        setFloatInput("pinhole.shift.x", s.CameraPinholeShiftX);
        setFloatInput("pinhole.shift.y", s.CameraPinholeShiftY);

        setFloatInput("thinlens.shutter.open", s.CameraThinlensShutterOpen);
        setFloatInput("thinlens.shutter.close", s.CameraThinlensShutterClose);
        setFloatInput("thinlens.fov", s.CameraThinlensFov);
        setFloatInput("thinlens.aspect", s.CameraThinlensAspect);
        setFloatInput("thinlens.shift.x", s.CameraThinlensShiftX);
        setFloatInput("thinlens.shift.y", s.CameraThinlensShiftY);
        setFloatInput("thinlens.focus.distance", s.CameraThinlensFocusDistance);
        setFloatInput("thinlens.lens.radius", s.CameraThinlensLensRadius);
        setIntegerInput("thinlens.lens.sides", s.CameraThinlensLensSides);
        setFloatInput("thinlens.lens.rotation", s.CameraThinlensLensRotation);

        setFloatInput("spherical.shutter.open", s.CameraSphericalShutterOpen);
        setFloatInput("spherical.shutter.close", s.CameraSphericalShutterClose);

        setFloatInput("fisheye.shutter.open", s.CameraFisheyeShutterOpen);
        setFloatInput("fisheye.shutter.close", s.CameraFisheyeShutterClose);
                
    }
    
    // -------------------------------------------------------------------------
    // change panels for different settings (shader, light, camera)
    
    
    private void ChangeShaderSettingsPanel(String shaderType) 
    {
        JPanel panel = shaderPanels.get(shaderType);
        if (currentShaderPanel != null)
        {
            //currentShaderPanel.setVisible(false);
            //currentShaderPanel = panel;
            //panel.setVisible(true);
            
            panelShaderSettings.remove(currentShaderPanel);
            panelShaderSettings.add(panel, BorderLayout.NORTH);
            currentShaderPanel = panel;
            panelShaderSettings.updateUI();
        }
    }

    private void ChangeLightSettingsPanel(String lightType) 
    {
        JPanel panel = lightPanels.get(lightType);
        if (currentLightPanel != null)
        {
            panelLightSettings.remove(currentLightPanel);
            panelLightSettings.add(panel, BorderLayout.NORTH);
            currentLightPanel = panel;
            panelLightSettings.updateUI();
        }
    }    

    private void ChangeCameraSettingsPanel(String cameraType) 
    {
        JPanel panel = cameraPanels.get(cameraType);
        if (currentCameraPanel != null)
        {
            panelCameraSettings.remove(currentCameraPanel);
            panelCameraSettings.add(panel, BorderLayout.NORTH);
            currentCameraPanel = panel;
            panelCameraSettings.updateUI();
        }
    }      
    
    
    
    // -------------------------------------------------------------------------
    // create custom controls with label text

    
    private void createComboBox(JPanel parent, String name, String caption, String[] values)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JComboBox cb = new JComboBox(values);
        
        parent.add(label);
        parent.add(cb);

        label.setLabelFor(cb);
        
        dict.put(name, cb);
    }
    
    private void createIntegerInput(JPanel parent, String name, String caption, int defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf = new JTextField();
        tf.setText(Integer.toString(defaultValue));
        
        parent.add(label);
        parent.add(tf);

        label.setLabelFor(tf);
        
        dict.put(name, tf);
    }
    
    private void createBooleanInput(JPanel parent, String name, String caption, boolean defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JCheckBox cb = new JCheckBox();
        cb.setText("");
        cb.setSelected(defaultValue);
        
        parent.add(label);
        parent.add(cb);

        label.setLabelFor(cb);
        
        dict.put(name, cb);
    }    
    
    private void createFloatInput(JPanel parent, String name, String caption, float defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf = new JTextField();
        tf.setText(Float.toString(defaultValue));
        
        parent.add(label);
        parent.add(tf);

        label.setLabelFor(tf);
        
        dict.put(name, tf);
    }

    private void createTextInput(JPanel parent, String name, String caption, String defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf = new JTextField(10);
        tf.setText(defaultValue);
        
        parent.add(label);
        parent.add(tf);

        label.setLabelFor(tf);

        dict.put(name, tf);
    }    
    
    private void createRGBInput(JPanel parent, String name, String caption, float[] defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        //final JTextField tf = new JTextField(10);
        final JPanel colorPanel = new JPanel();
        colorPanel.setBackground(colorFromFloatArray(defaultValue));
        JButton btn = new JButton("...");
        btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                Color color = JColorChooser.showDialog(null, "Choose Color", colorPanel.getBackground());
                colorPanel.setBackground(color);
            }
        });
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(colorPanel);
        subPanel.add(btn);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, colorPanel);        
    }
    
    private void createManualRGBInput(JPanel parent, String name, String caption, float[] defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        JTextField tf3 = new JTextField();
        
        tf1.setText(Float.toString(defaultValue[0]));
        tf2.setText(Float.toString(defaultValue[1]));
        tf3.setText(Float.toString(defaultValue[2]));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        subPanel.add(tf3);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);         
    }
    
    private void createPointInput(JPanel parent, String name, String caption, Point3 defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        JTextField tf3 = new JTextField();
        
        tf1.setText(Float.toString(defaultValue.x));
        tf2.setText(Float.toString(defaultValue.y));
        tf3.setText(Float.toString(defaultValue.z));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        subPanel.add(tf3);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);        
    }    

    private void createVectorInput(JPanel parent, String name, String caption, Vector3 defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        JTextField tf3 = new JTextField();
        
        tf1.setText(Float.toString(defaultValue.x));
        tf2.setText(Float.toString(defaultValue.y));
        tf3.setText(Float.toString(defaultValue.z));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        subPanel.add(tf3);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);        
    }       
    
    private void createResolutionInput(JPanel parent, String name, String caption, int x, int y)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        
        tf1.setText(Integer.toString(x));
        tf2.setText(Integer.toString(y));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);        
    } 
    
    
    
    
    private String getComboBoxInput(String name)
    {
        JComboBox cb = (JComboBox) dict.get(name);
        return cb.getSelectedItem().toString();
    }
    
    private int getIntegerInput(String name)
    {
        JTextField tf = (JTextField) dict.get(name);
        return Integer.parseInt(tf.getText());
    }

    private boolean getBooleanInput(String name)
    {
        JCheckBox cb = (JCheckBox) dict.get(name);
        return cb.isSelected();
    }
    
    private float getFloatInput(String name)
    {
        JTextField tf = (JTextField) dict.get(name);
        return Float.parseFloat(tf.getText());
    }
    
    private String getTextInput(String name)
    {
        JTextField tf = (JTextField) dict.get(name);
        return tf.getText();
    }
    
    private float[] getRGBInput(String name)
    {
        JPanel colorPanel = (JPanel) dict.get(name);
        return colorToFloatArray(colorPanel.getBackground());
    }
    
    private float[] getManualRGBInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        float[] result = new float[] {  Float.parseFloat(tf1.getText()),
                                        Float.parseFloat(tf2.getText()),
                                        Float.parseFloat(tf3.getText()) };
        
        return result;
    }    
    
    private Point3 getPointInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        Point3 result = new Point3(Float.parseFloat(tf1.getText()),
                                   Float.parseFloat(tf2.getText()),
                                   Float.parseFloat(tf3.getText()));
        
        return result;
    }    

    private Vector3 getVectorInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        Vector3 result = new Vector3(Float.parseFloat(tf1.getText()),
                                   Float.parseFloat(tf2.getText()),
                                   Float.parseFloat(tf3.getText()));
        
        return result;
    }       

    private int[] getResolutionInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);

        int[] result = new int[] { Integer.parseInt(tf1.getText()),
                                     Integer.parseInt(tf2.getText()) };
        
        return result;
    } 

    
    
    
    
    private void setComboBoxInput(String name, String value)
    {
        JComboBox cb = (JComboBox) dict.get(name);
        // TODO: not sure if that works
        cb.setSelectedItem(value);
    }
    
    private void setIntegerInput(String name, int value)
    {
        JTextField tf = (JTextField) dict.get(name);
        tf.setText(Integer.toString(value));
    }

    private void setBooleanInput(String name, boolean value)
    {
        JCheckBox cb = (JCheckBox) dict.get(name);
        cb.setSelected(value);
    }
    
    private void setFloatInput(String name, float value)
    {
        JTextField tf = (JTextField) dict.get(name);
        tf.setText(Float.toString(value));
    }
    
    private void setTextInput(String name, String value)
    {
        JTextField tf = (JTextField) dict.get(name);
        tf.setText(value);
    }
    
    private void setRGBInput(String name, float[] value)
    {
        JPanel colorPanel = (JPanel) dict.get(name);
        colorPanel.setBackground(colorFromFloatArray(value));
    }
    
    private void setManualRGBInput(String name, float[] value)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        tf1.setText(Float.toString(value[0]));
        tf2.setText(Float.toString(value[1]));
        tf3.setText(Float.toString(value[2]));        
    }    
    
    private void setPointInput(String name, Point3 value)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        tf1.setText(Float.toString(value.x));
        tf2.setText(Float.toString(value.y));
        tf3.setText(Float.toString(value.z));        
    }    

    private void setVectorInput(String name, Vector3 value)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        tf1.setText(Float.toString(value.x));
        tf2.setText(Float.toString(value.y));
        tf3.setText(Float.toString(value.z));
    }       

    private void setResolutionInput(String name, int x, int y)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);

        tf1.setText(Integer.toString(x));
        tf2.setText(Integer.toString(y));
    } 
    
    
    //</editor-fold>
    
    //<editor-fold defaultstate="collapsed" desc="conversions">

    // -------------------------------------------------------------------------
    // div conversions
    
    
    private Color colorFromFloatArray(float[] rgbArray)
    {
        return new Color(rgbArray[0], rgbArray[1], rgbArray[2]);
    }
    
    public static float[] colorToFloatArray(Color color)
    {
        float[] colorArray = new float[3];
        color.getRGBColorComponents(colorArray);
        return colorArray;
    }

    //</editor-fold>

    //<editor-fold defaultstate="collapsed" desc="Sunflow User Interface Implementations">
    // needed for progress report to UI

    
    private int min;
    private int max;
    private float invP;
    private String task;
    private int lastP;    
    
    @Override
    public void print(Module m, PrintLevel level, String s) {
        String msg = UI.formatOutput(m, level, s);
        taOutput.append(msg + "\n");
        //taOutput.setCaretPosition(taOutput.getText().length());
    }

    @Override
    public void taskStart(String s, int min, int max) {
        task = s;
        this.min = min;
        this.max = max;
        lastP = -1;
        invP = 100.0f / (max - min);
        
        jProgressBar1.setStringPainted(true);
        jProgressBar1.setMinimum(min);
        jProgressBar1.setMaximum(max);
        jProgressBar1.setValue(0);
        
        
    }

    @Override
    public void taskUpdate(int current) {
        jProgressBar1.setValue(current);
        
        int p = (min == max) ? 0 : (int) ((current - min) * invP);
        if (p != lastP)
        {
            jProgressBar1.setString(Integer.toString(p) + "%");
            lastP = p;
            //System.err.print(task + " [" + (lastP = p) + "%]\r");        
        }
    }

    @Override
    public void taskStop() {
        btnRender.setEnabled(true);
        btnCancel.setEnabled(false);
    }

    //</editor-fold>


}
