/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.gcsc.vrl.sunflow.test;

import edu.gcsc.vrl.sunflow.SpringUtilities;
import eu.mihosoft.vrl.v3d.OBJ2Geometry;
import eu.mihosoft.vrl.v3d.Shape3DArray;
import eu.mihosoft.vrl.v3d.VGeometry3D;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.j3d.Shape3D;
import javax.media.j3d.TriangleArray;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.SpringLayout;
import javax.vecmath.Point3f;
import org.sunflow.SunflowAPI;
import org.sunflow.math.Matrix4;
import org.sunflow.math.Point3;
import org.sunflow.math.Vector3;
import org.sunflow.system.ImagePanel;

/**
 *
 * @author ThomasL
 */
public class SunflowGUI extends javax.swing.JFrame 
{
    SunflowAPI sun = new SunflowAPI();
    
    float[] orientation;
    Shape3DArray shapes;
    
    
    /**
     * Creates new form SunflowGUI
     */
    public SunflowGUI(float[] orientation, Shape3DArray shapes) {
        initComponents();
        
        this.orientation = orientation;
        this.shapes = shapes;
        
        buildGUI();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        imagePanel1 = new org.sunflow.system.ImagePanel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        tfResolutionX = new javax.swing.JTextField();
        tfResolutionY = new javax.swing.JTextField();
        cbSampler = new javax.swing.JComboBox();
        tfAaMin = new javax.swing.JTextField();
        tfAaMax = new javax.swing.JTextField();
        tfAaSamples = new javax.swing.JTextField();
        tfAaContrast = new javax.swing.JTextField();
        cbFilter = new javax.swing.JComboBox();
        cbJitter = new javax.swing.JCheckBox();
        cbCache = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        ccBackground = new javax.swing.JColorChooser();
        panelShader = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        cbShaderType = new javax.swing.JComboBox();
        panelShaderSettings = new javax.swing.JPanel();
        panelLight = new javax.swing.JPanel();
        cbLightType = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        panelLightSettings = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        cbCameraType = new javax.swing.JComboBox();
        panelCameraSettings = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        labelBounds = new javax.swing.JLabel();
        labelBounds1 = new javax.swing.JLabel();
        labelBounds2 = new javax.swing.JLabel();
        labelBounds3 = new javax.swing.JLabel();
        labelCenter = new javax.swing.JLabel();
        labelDiameter = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout imagePanel1Layout = new javax.swing.GroupLayout(imagePanel1);
        imagePanel1.setLayout(imagePanel1Layout);
        imagePanel1Layout.setHorizontalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 497, Short.MAX_VALUE)
        );
        imagePanel1Layout.setVerticalGroup(
            imagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 360, Short.MAX_VALUE)
        );

        jButton1.setText("render");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Resolution");

        jLabel2.setText("Sampler");

        jLabel3.setText("aa.min");

        jLabel4.setText("aa.max");

        jLabel5.setText("aa.samples");

        jLabel6.setText("aa.contrast");

        jLabel7.setText("Filter");

        jLabel8.setText("Jitter");

        jLabel9.setText("Cache");

        tfResolutionX.setText("533");

        tfResolutionY.setText("300");

        cbSampler.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "bucket", "ipr", "fast", "multipass" }));

        tfAaMin.setText("0");

        tfAaMax.setText("1");

        tfAaSamples.setText("4");

        tfAaContrast.setText("0.1");

        cbFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "triangle", "gaussian", "box", "blackman-harris", "sinc", "mitchell ", "catmull-rom ", "lanczos ", "bspline " }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tfResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tfResolutionY))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tfAaMin, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfAaMax, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbSampler, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfAaSamples, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbCache)
                                    .addComponent(cbJitter)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tfAaContrast, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(233, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tfResolutionX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfResolutionY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbSampler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tfAaMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfAaMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(tfAaSamples, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(tfAaContrast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cbFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(14, 14, 14)
                        .addComponent(jLabel8))
                    .addComponent(cbJitter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cbCache, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(135, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Image", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ccBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ccBackground, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Background", jPanel2);

        jLabel10.setText("Type");

        cbShaderType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "diffuse", "phong", "ambient", "mirror", "glass", "shiny", "ward", "constant", "uber", "view_caustics", "view_irradiance", "view_global" }));
        cbShaderType.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbShaderTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelShaderSettingsLayout = new javax.swing.GroupLayout(panelShaderSettings);
        panelShaderSettings.setLayout(panelShaderSettingsLayout);
        panelShaderSettingsLayout.setHorizontalGroup(
            panelShaderSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        panelShaderSettingsLayout.setVerticalGroup(
            panelShaderSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelShaderLayout = new javax.swing.GroupLayout(panelShader);
        panelShader.setLayout(panelShaderLayout);
        panelShaderLayout.setHorizontalGroup(
            panelShaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShaderLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panelShaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelShaderSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelShaderLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(45, 45, 45)
                        .addComponent(cbShaderType, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelShaderLayout.setVerticalGroup(
            panelShaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelShaderLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelShaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(cbShaderType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelShaderSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Shader", panelShader);

        cbLightType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "mesh", "point", "spherical", "directional", "ibl", "meshlight", "sunsky", "cornellbox" }));
        cbLightType.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLightTypeActionPerformed(evt);
            }
        });

        jLabel11.setText("Type");

        javax.swing.GroupLayout panelLightSettingsLayout = new javax.swing.GroupLayout(panelLightSettings);
        panelLightSettings.setLayout(panelLightSettingsLayout);
        panelLightSettingsLayout.setHorizontalGroup(
            panelLightSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );
        panelLightSettingsLayout.setVerticalGroup(
            panelLightSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 306, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelLightLayout = new javax.swing.GroupLayout(panelLight);
        panelLight.setLayout(panelLightLayout);
        panelLightLayout.setHorizontalGroup(
            panelLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLightLayout.createSequentialGroup()
                .addGroup(panelLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLightLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel11)
                        .addGap(45, 45, 45)
                        .addComponent(cbLightType, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLightLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(panelLightSettings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        panelLightLayout.setVerticalGroup(
            panelLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cbLightType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelLightSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Light", panelLight);

        jLabel12.setText("Type");

        cbCameraType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "pinhole", "thinlens", "spherical", "fisheye" }));
        cbCameraType.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCameraTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelCameraSettingsLayout = new javax.swing.GroupLayout(panelCameraSettings);
        panelCameraSettings.setLayout(panelCameraSettingsLayout);
        panelCameraSettingsLayout.setHorizontalGroup(
            panelCameraSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelCameraSettingsLayout.setVerticalGroup(
            panelCameraSettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 311, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCameraSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(45, 45, 45)
                        .addComponent(cbCameraType, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 206, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cbCameraType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCameraSettings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Camera", jPanel3);

        labelBounds.setText("jLabel13");

        labelBounds1.setText("bounds");

        labelBounds2.setText("center");

        labelBounds3.setText("diameter");

        labelCenter.setText("jLabel13");

        labelDiameter.setText("jLabel13");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(labelBounds3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelDiameter))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(labelBounds2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelCenter))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(labelBounds1)
                        .addGap(35, 35, 35)
                        .addComponent(labelBounds)))
                .addContainerGap(318, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBounds)
                    .addComponent(labelBounds1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBounds2)
                    .addComponent(labelCenter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelBounds3)
                    .addComponent(labelDiameter))
                .addContainerGap(294, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Infos", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jTabbedPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(imagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(imagePanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>                        

    // render button clicked
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        render();
    }                                        

    private void cbShaderTypeActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String shaderType = cbShaderType.getSelectedItem().toString();
        ChangeShaderSettingsPanel(shaderType);
    }                                            

    private void cbLightTypeActionPerformed(java.awt.event.ActionEvent evt) {                                            
        String lightType = cbLightType.getSelectedItem().toString();
        ChangeLightSettingsPanel(lightType);
    }                                           

    private void cbCameraTypeActionPerformed(java.awt.event.ActionEvent evt) {                                             
        String cameraType = cbCameraType.getSelectedItem().toString();
        ChangeCameraSettingsPanel(cameraType);
    }                                            

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SunflowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SunflowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SunflowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SunflowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(
                new Runnable() 
                {
                    @Override
                    public void run() 
                    {
                        // build sample 3D object from obj file for testing without VRL-Studio
                        
                        
                        // orientation
                        float[] orientation = new float[] {0.9955475f, -0.09355248f, 0.01153875f, 0.0f, 0.067296006f, 0.6196904f, -0.7819559f, 0.0f, 0.066003464f, 0.77925074f, 0.62322694f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f};

                        // shapes
                        File f = new File("C:\\Users\\ThomasL\\Documents\\Queisser\\VRL\\teapot.obj");
                        OBJ2Geometry o = new OBJ2Geometry();
                        VGeometry3D geo = null;               
                        try 
                        {
                            geo = new VGeometry3D(o.loadAsVTriangleArray(f));
                        } 
                        catch (IOException ex) 
                        {
                            Logger.getLogger(SunflowGUI.class.getName()).log(Level.SEVERE, null, ex);
                        }


                        if (geo != null)
                        {
                            Shape3DArray shapes = (Shape3DArray) geo.generateShape3DArray();

                            SunflowGUI frm = new SunflowGUI(orientation, shapes);
                            frm.setVisible(true);
                        }
                    }
                });
    }
    // Variables declaration - do not modify                     
    private javax.swing.JCheckBox cbCache;
    private javax.swing.JComboBox cbCameraType;
    private javax.swing.JComboBox cbFilter;
    private javax.swing.JCheckBox cbJitter;
    private javax.swing.JComboBox cbLightType;
    private javax.swing.JComboBox cbSampler;
    private javax.swing.JComboBox cbShaderType;
    private javax.swing.JColorChooser ccBackground;
    private org.sunflow.system.ImagePanel imagePanel1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelBounds;
    private javax.swing.JLabel labelBounds1;
    private javax.swing.JLabel labelBounds2;
    private javax.swing.JLabel labelBounds3;
    private javax.swing.JLabel labelCenter;
    private javax.swing.JLabel labelDiameter;
    private javax.swing.JPanel panelCameraSettings;
    private javax.swing.JPanel panelLight;
    private javax.swing.JPanel panelLightSettings;
    private javax.swing.JPanel panelShader;
    private javax.swing.JPanel panelShaderSettings;
    private javax.swing.JTextField tfAaContrast;
    private javax.swing.JTextField tfAaMax;
    private javax.swing.JTextField tfAaMin;
    private javax.swing.JTextField tfAaSamples;
    private javax.swing.JTextField tfResolutionX;
    private javax.swing.JTextField tfResolutionY;
    // End of variables declaration                   


    public ImagePanel getImagePanel()
    {
        return imagePanel1;
    }
    
    
    
    private void render()
    {
        sun.reset();
        
        
        
        // IMAGE PROPERTIES
        
        int resX            = Integer.parseInt(tfResolutionX.getText());
        int resY            = Integer.parseInt(tfResolutionY.getText());
        String sampler      = cbSampler.getSelectedItem().toString();
        int aaMin           = Integer.parseInt(tfAaMin.getText());
        int aaMax           = Integer.parseInt(tfAaMax.getText());
        int aaSamples       = Integer.parseInt(tfAaSamples.getText());
        float aaContrast    = Float.parseFloat(tfAaContrast.getText());
        String filter       = cbFilter.getSelectedItem().toString();
        boolean aaJitter    = cbJitter.isSelected();
        boolean aaCache     = cbCache.isSelected();
        
        setImageParameter(resX, resY, sampler, aaMin, aaMax, aaSamples, aaContrast, filter, aaJitter, aaCache);
        
        
        
        // ---------------------------------------------------------------------
        // BACKGROUND
        
        float[] background = new float[3];
        ccBackground.getColor().getRGBColorComponents(background);
        sun.parameter("color", null, background);
        sun.shader("background.shader", "constant");
        sun.geometry("background", "background");
        sun.parameter("shaders", "background.shader");
        sun.instance("background.instance", "background");        
        
        
        
        // ---------------------------------------------------------------------
        // CAMERA
        
        sun.parameter("transform", Matrix4.lookAt(
                new Point3(0f, 5f, 35),                 // eye 
                new Point3(0f, 0f, 0f),                 // target
                new Vector3(0.0f, 1.0f, 0.0f)));        // up
        
        //sun.parameter("fov", 25.0f);
        //sun.parameter("aspect", 1.777777777777f);
        //sun.camera("camera_default", "pinhole");
        
        
        String cameraType = cbCameraType.getSelectedItem().toString();
        String cameraName = "camera_default";
        if (cameraType.equals("pinhole"))
        {
            float pinholeShutterOpen = getFloatInput("pinhole.shutter.open");
            float pinholeShutterClose = getFloatInput("pinhole.shutter.close");
            float pinholeFov = getFloatInput("pinhole.fov");
            float pinholeAspect = getFloatInput("pinhole.aspect");
            float pinholeShiftX = getFloatInput("pinhole.shift.x");
            float pinholeShiftY = getFloatInput("pinhole.shift.y");

            setCameraPinhole(cameraName, pinholeShutterOpen, pinholeShutterClose, 
                    pinholeFov, pinholeAspect, pinholeShiftX, pinholeShiftY);
        }
        else if (cameraType.equals("thinlens"))
        {
            float thinlensShutterOpen = getFloatInput("pinhole.shutter.open");
            float thinlensShutterClose = getFloatInput("pinhole.shutter.close");
            float thinlensFov = getFloatInput("thinlens.fov");
            float thinlensAspect = getFloatInput("thinlens.aspect");
            float thinlensShiftX = getFloatInput("thinlens.shift.x");
            float thinlensShiftY = getFloatInput("thinlens.shift.y");
            float thinlensFocusDistance = getFloatInput("thinlens.focus.distance");
            float thinlensLensRadius = getFloatInput("thinlens.lens.radius");
            float thinlensLensSides = getIntInput("thinlens.lens.sides");
            float thinlensLensRotation = getFloatInput("thinlens.lens.rotation");
            
            setCameraThinlens(cameraName,
                    thinlensShutterOpen, thinlensShutterClose, thinlensFov, 
                    thinlensAspect, thinlensShiftX, thinlensShiftY, 
                    thinlensFocusDistance, thinlensLensRadius, thinlensLensSides,
                    thinlensLensRotation);
        }
        else if (cameraType.equals("spherical"))
        {
            float sphericalShutterOpen = getFloatInput("spherical.shutter.open");
            float sphericalShutterClose = getFloatInput("spherical.shutter.close");
            
            setCameraSpherical(cameraName, sphericalShutterOpen, sphericalShutterClose);
        }
        else if (cameraType.equals("fisheye"))
        {
            float fisheyeShutterOpen = getFloatInput("fisheye.shutter.open");
            float fisheyeShutterClose = getFloatInput("fisheye.shutter.close");
            
            setCameraFisheye(cameraName, fisheyeShutterOpen, fisheyeShutterClose);
        }
        
        
        
        
        
        // ---------------------------------------------------------------------
        // SHADER

        String shaderType = cbShaderType.getSelectedItem().toString();
        String shaderName = "default";
        if (shaderType.equals("diffuse"))
        {
            float[] diffuseRGB = getRGBInput("diffuse.rgb");
            String diffuseTexture = getTextInput("diffuse.texture");
            
            if (diffuseTexture.isEmpty())
            {
                // colored shader
                setShaderDiffuse(shaderName, diffuseRGB);
            }
            else
            {
                // textured shader
                setShaderDiffuseTextured(shaderName, diffuseTexture);
            }
                        
        }
        else if (shaderType.equals("phong"))
        {
            float[] phongDiffuseRGB = getRGBInput("phong.diffuse.rgb");
            String phongTexture = getTextInput("phong.texture");
            float[] phongSpecularRGB = getRGBInput("phong.specular.rgb");
            float phongPower = getFloatInput("phong.power");
            int phongSamples = getIntInput("phong.samples");

            if (phongTexture.isEmpty())
            {
                // colored shader
                setShaderPhong(shaderName, phongDiffuseRGB, phongSpecularRGB, phongPower, phongSamples);
            }
            else
            {
                // textured shader
                setShaderPhongTextured(shaderName, phongTexture, phongSpecularRGB, phongPower, phongSamples);
            }
        }
        else if (shaderType.equals("ambient"))
        {
            float[] ambientBrightRGB = getRGBInput("ambient.bright.RGB");
            String ambientTexture = getTextInput("ambient.texture");
            float[] ambientDarkRGB = getRGBInput("ambient.dark.RGB");
            int ambientSamples = getIntInput("ambient.samples");
            float ambientMaxDist = getFloatInput("ambient.maxdist");
            
            if (ambientTexture.isEmpty())
            {
                // colored shader
                setShaderAmbient(shaderName, ambientBrightRGB, ambientDarkRGB, ambientSamples, ambientMaxDist);
            }
            else
            {
                // textured shader
                setShaderAmbientTexture(shaderName, ambientTexture);
            }
        }
        else if (shaderType.equals("mirror"))
        {
            float[] mirrorColorRGB = getRGBInput("mirror.color.RGB");
            
            setShaderMirror(shaderName, mirrorColorRGB);
        }
        else if (shaderType.equals("glass"))
        {
            float glassEta = getFloatInput("glass.eta");
            float[] glassColor = getRGBInput("glass.color.RGB");
            float glassAbsorptionDistance = getFloatInput("glass.absorption.distance");
            float[] glassAbsorptionColor = getRGBInput("glass.absorption.color.RGB");   
            
            setShaderGlass(shaderName, glassEta, glassColor, glassAbsorptionDistance, glassAbsorptionColor);
        }
        else if (shaderType.equals("shiny"))
        {
            float[] shinyDiffuseColor = getRGBInput("shiny.diffuse.color.RGB");
            String shinyTexture = getTextInput("shiny.texture");
            float shinyValue = getFloatInput("shiny.value");

            if (shinyTexture.isEmpty())
            {
                // colored shader
                setShaderShiny(shaderName, shinyDiffuseColor, shinyValue);
            }
            else
            {
                // textured shader
                setShaderShinyTexture(shaderName, shinyTexture, shinyValue);
            }
        }
        else if (shaderType.equals("ward"))
        {
            float[] wardDiffuseColor = getRGBInput("ward.diffuse.color.RGB");
            String wardTexture = getTextInput("ward.texture");
            float[] wardSpecularColor = getRGBInput("ward.specular.color.RGB");
            float wardRoughnessX = getFloatInput("ward.roughnessX");
            float wardRoughnessY = getFloatInput("ward.roughnessY");
            int wardSamples = getIntInput("ward.samples");         
            
            if (wardTexture.isEmpty()) {
                setShaderWard(shaderName, wardDiffuseColor, wardSpecularColor, wardRoughnessX, wardRoughnessY, wardSamples);
            }
            else {
                setShaderWardTexture(shaderName, wardTexture, wardSpecularColor, wardRoughnessX, wardRoughnessY, wardSamples);
            }
        }
        else if (shaderType.equals("constant"))
        {
            float[] constantColor = getRGBInput("constant.color.RGB");
            setShaderConstant(shaderName, constantColor);
        }        
        else if (shaderType.equals("uber"))
        {
            float[] uberDiffuseColor = getRGBInput("uber.diffuse.color.RGB");
            String uberDiffuseTexture = getTextInput("uber.diffuse.texture");
            float uberDiffuseBlend = getFloatInput("uber.diffuse.blend");
            float[] uberSpecularColor = getRGBInput("uber.specular.color.RGB");
            String uberSpecularTexutre =  getTextInput("uber.specular.texture");
            float uberSpecularBlend = getFloatInput("uber.specular.blend");
            float uberGlossyness = getFloatInput("uber.glossyness");
            int uberSamples = getIntInput("uber.samples");     
            setShaderUber(shaderName, uberDiffuseColor, uberDiffuseTexture, uberDiffuseBlend,
                    uberSpecularColor, uberSpecularTexutre, uberSpecularBlend,
                    uberGlossyness, uberSamples);
        }
        else if (shaderType.equals("view_caustics"))
        {
            sun.shader(shaderName, "view_caustics");
        }
        else if (shaderType.equals("view_irradiance"))
        {
            sun.shader(shaderName, "view_irradiance");
        }
        else if (shaderType.equals("view_global"))
        {
            sun.shader(shaderName, "view_global");
        }
       
        
               
        
/*        

        
        // ---------------------------------------------------------------------
        // MODIFIER
        
        sun.parameter("texture", p.getNextToken());
        sun.parameter("scale", p.getNextFloat());
        sun.modifier(name, "bump_map");

        sun.parameter("texture", p.getNextToken());
        sun.modifier(name, "normal_map");

        sun.parameter("function", p.getNextInt());
        sun.parameter("size", p.getNextFloat());
        sun.parameter("scale", p.getNextFloat());
        sun.modifier(name, "perlin");        
        

        
        // ---------------------------------------------------------------------
        // OBJECT
        
        // these are the parameters to be passed to the instance
        sun.parameter("accel", p.getNextToken());
            
        // mesh
        sun.parameter("triangles", triangles);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("normals", "vector", "vertex", normals);
        sun.parameter("uvs", "texcoord", "vertex", uvs);
        sun.geometry(name, "triangle_mesh");    
        
        // flat-mesh
        sun.parameter("triangles", triangles);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("uvs", "texcoord", "vertex", uvs);
        sun.geometry(name, "triangle_mesh");            
            
        // sphere
        sun.parameter("transform", Matrix4.translation(x, y, z).multiply(Matrix4.scale(radius)));
        sun.parameter("shaders", shaders);
        sun.parameter("modifiers", modifiers);
        sun.instance(name + ".instance", name);
            
        // cylinder
        sun.geometry(name, "cylinder");           
            
        // banchoff
        sun.geometry(name, "banchoff");            
            
        // torus
        sun.parameter("radiusInner", p.getNextFloat());
        sun.parameter("radiusOuter", p.getNextFloat());
        sun.geometry(name, "torus");            
            
        // sphereflake
        sun.parameter("level", p.getNextInt());
        sun.parameter("axis", parseVector());
        sun.parameter("radius", p.getNextFloat());
        sun.geometry(name, "sphereflake");            
            
        // plane
        sun.parameter("center", parsePoint());
        sun.parameter("normal", parseVector());
        // or
        sun.parameter("point1", parsePoint());
        sun.parameter("point2", parsePoint());
        sun.geometry(name, "plane");
            
        // generic-mesh
        sun.parameter("points", "point", "vertex", parseFloatArray(np * 3));
        sun.parameter("triangles", parseIntArray(nt * 3));    
        sun.parameter("normals", "vector", "vertex", parseFloatArray(np * 3));    
        sun.parameter("normals", "vector", "facevarying", parseFloatArray(nt * 9));
        sun.parameter("uvs", "texcoord", "vertex", parseFloatArray(np * 2));
        sun.parameter("uvs", "texcoord", "facevarying", parseFloatArray(nt * 6));
        sun.parameter("faceshaders", parseIntArray(nt));
        sun.geometry(name, "triangle_mesh");
        
        // hair
        sun.parameter("segments", p.getNextInt());
        sun.parameter("widths", p.getNextFloat());
        sun.parameter("points", "point", "vertex", parseFloatArray(p.getNextInt()));
        sun.geometry(name, "hair");
        
        // file-mesh
        sun.parameter("filename", p.getNextToken());
        sun.parameter("smooth_normals", p.getNextBoolean());
        sun.geometry(name, "file_mesh");
        
            
        // create instance
        sun.parameter("shaders", shaders);
        sun.parameter("modifiers", modifiers);
        sun.parameter("transform", transform[0]);
        sun.instance(name + ".instance", name);
*/        


        // plane
        sun.parameter("center", new Point3(0, -3, 0));
        sun.parameter("normal", new Point3(0, 1, 1));
        sun.geometry("plane1", "plane");        
        
         setShaderDiffuse("shader.floor", colorToFloatArray(Color.GRAY));

        sun.parameter("shaders", "shader.floor");
        //sun.parameter("modifiers", modifiers);
        //sun.parameter("transform", transform[0]);
        sun.instance("plane" + ".instance", "plane1");
        
        
        
        // ---------------------------------------------------------------------
        // LIGHT        
        
  
        String lightType = cbLightType.getSelectedItem().toString();
        String lightName = "light";
        if (lightType.equals("mesh"))
        {
            float[] meshRadianceColor = getRGBInput("mesh.radiance.color");
            int meshSamples = getIntInput("mesh.samples");
            //createTextInput(panel, "mesh.source", "Mesh Light Source", "");

            setLightMesh(lightName, meshRadianceColor, meshSamples);
        }
        else if (lightType.equals("point"))
        {
            Point3 pointCenter = getPointInput("point.center");
            float[] pointPower = getRGBInput("point.power");
            
            setLightPoint(lightName, pointCenter, pointPower);
        }
        else if (lightType.equals("spherical"))
        {
            float[] sphericalRadianceColor = getRGBInput("spherical.radiance.color");
            Point3 sphericalCenter = getPointInput("spherical.center");
            float sphericalRadius = getFloatInput("spherical.radius");
            int sphericalSamples = getIntInput("spherical.samples");            
            
            setLightSpherical(lightName, sphericalRadianceColor, sphericalCenter, sphericalRadius, sphericalSamples);
        }
        else if (lightType.equals("directional"))
        {
            Point3 directionalSource = getPointInput("directional.source");
            Point3 directionalTarget = getPointInput("directional.target");
            float directionalRadius = getFloatInput("directional.radius");
            float[] directionalRadiance = getRGBInput("directional.radiance.color");
            
            setLightDirectional(lightName, directionalSource, directionalTarget, directionalRadius, directionalRadiance);
        }
        else if (lightType.equals("ibl"))
        {
            String iblTexture = getTextInput("ibl.texture");
            Vector3 iblCenter = getVectorInput("ibl.center");
            Vector3 iblUp = getVectorInput("ibl.up");
            boolean iblFixed = getBooleanInput("ibl.fixed");
            int iblSamples = getIntInput("ibl.samples");
            int iblLowSamples = getIntInput("ibl.lowsamples");
            
            setLightIbl(lightName, iblTexture, iblCenter, iblUp, iblFixed, iblSamples, iblLowSamples);
        }
        else if (lightType.equals("meshlight"))
        {
            float[] meshlightRadiance = getRGBInput("meshlight.radiance");
            int meshlightSamples = getIntInput("meshlight.samples");    
            
            setLightMeshlight(lightName, meshlightRadiance, meshlightSamples);
        }
        else if (lightType.equals("sunsky"))
        {
            Vector3 sunskyUp = getVectorInput("sunsky.up");
            Vector3 sunskyEast = getVectorInput("sunsky.east");
            Vector3 sunskySundir = getVectorInput("sunsky.sundir");
            float sunskyTurbidity = getFloatInput("sunsky.turbidity");
            int sunskySamples = getIntInput("sunsky.samples");
            boolean sunskyGroundExtendsky = getBooleanInput("sunsky.ground.extendsky");
            float[] sunskyGroundColor = getRGBInput("sunsky.ground.color");            
            
            setLightSunsky(lightName, sunskyUp, sunskyEast, sunskySundir, sunskyTurbidity, sunskySamples, sunskyGroundExtendsky, sunskyGroundColor);
        }
        else if (lightType.equals("cornellbox"))
        {
            Point3 cornellboxCorner0 = getPointInput("cornellbox.corner0");
            Point3 cornellboxCorner1 = getPointInput("cornellbox.corner1");
            float[] cornellboxLeftColor = getRGBInput("cornellbox.leftColor");
            float[] cornellboxRightColor = getRGBInput("cornellbox.rightColor");
            float[] cornellboxTopColor = getRGBInput("cornellbox.topColor");
            float[] cornellboxBottomColor = getRGBInput("cornellbox.bottomColor");
            float[] cornellboxBackColor = getRGBInput("cornellbox.backColor");
            float[] cornellboxRadiance = getRGBInput("cornellbox.radiance");
            int cornellboxSamples = getIntInput("cornellbox.samples");
            
            setLightCornellbox(lightName, cornellboxCorner0, cornellboxCorner1, cornellboxLeftColor, cornellboxRightColor, 
                    cornellboxTopColor, cornellboxBottomColor, cornellboxBackColor, cornellboxRadiance, cornellboxSamples);
        }
           
        
        
        // light
        
//        sun.parameter("up", new Vector3(0, 1, 0));
//        sun.parameter("east", new Vector3(0, 0, 1));
//        sun.parameter("sundir", new Vector3(1, 1, 1));
//        sun.parameter("turbidity", 4.0f);
//        sun.parameter("samples", 64);
//        sun.light("light", "sunsky");   
        
        
        
        // shader
        
        sun.parameter("depths.diffuse", 0.2f);
        sun.parameter("depths.reflection", 0.1f);
        //sun.parameter("depths.refraction", 0);
//        sun.shader("default", "shiny_diffuse");     // shiny_phong

        // object - load from wavefront .obj file
        
//        float[] o = orientation;
//        Matrix4 M = new Matrix4(o[0], o[1], o[2], o[3], o[4], o[5], o[6], o[7], o[8], o[9], o[10], o[11]);
//        sun.parameter("filename", "C:\\Users\\ThomasL\\Documents\\NetBeansProjects\\VRL-Sunflow\\VRL-Sunflow\\teapot.obj");
//        sun.parameter("smooth_normals", true);
//        sun.geometry("teapot", "file_mesh");
//        sun.parameter("shaders", "default");
//        sun.parameter("transform", M);
//        sun.instance("teapot.instance", "teapot");    
        AddShape3DObject(sun, orientation, shapes.get(0));
        
        
        // options
        
        sun.parameter("camera", "camera_default");
        //sun.parameter("light", "light_default");
        //sun.parameter("resolutionX", 800);
        //sun.parameter("resolutionY", 450);
//        sun.parameter("resolutionX", 533);
//        sun.parameter("resolutionY", 300);
//        sun.parameter("aa.min", 0);
//        sun.parameter("aa.max", 1);
//        sun.parameter("filter", "triangle");
//        sun.parameter("sampler", "bucket");
        sun.options(SunflowAPI.DEFAULT_OPTIONS);
        
        
        
       
        
        
        
        
        
        
        
        //FileDisplay disp = new FileDisplay(true);
        //sun.render(sun.DEFAULT_OPTIONS, null);
        
        // start rendering in new thread for bucket rendering
        // without a own thread, image panel is first refreshed after rendering finished
        new Thread() 
        {
            @Override
            public void run() 
            {
                sun.render(SunflowAPI.DEFAULT_OPTIONS, imagePanel1);
                
                
                // INFOS
                org.sunflow.math.BoundingBox bb = sun.getBounds();
                labelBounds.setText(bb.toString());
                labelCenter.setText(bb.getCenter().toString());
                labelDiameter.setText(Float.toString(bb.getExtents().length()));
            }
            
        }.start();            
    }
    
    
    private void AddShape3DObject(SunflowAPI sun, float[] o, Shape3D shape)
    {
        String name = "test";

//      BUILD SIMPLE 3D OBJECT FOR TESTING
//        
//	VTriangleArray vTriangleArray = new VTriangleArray();		
//			
//	Node n1 = new Node(new Point3f(0f,0f,0f));
//        Node n2 = new Node(new Point3f(10f,0f,0f));
//        Node n3 = new Node(new Point3f(0f,10f,0f));
//        Node n4 = new Node(new Point3f(0f,0f,10f));
//
//        vTriangleArray.addTriangle(new Triangle(1,n1,n2,n3));
//        vTriangleArray.addTriangle(new Triangle(2,n1,n2,n4));
//        vTriangleArray.addTriangle(new Triangle(3,n1,n3,n4));
//        vTriangleArray.addTriangle(new Triangle(4,n2,n3,n4));    
//        
//	VGeometry3D geometry = new VGeometry3D(vTriangleArray, Color.black, Color.green, 1F, false);
//        
//        Shape3DArray shape3DArray = geometry.generateShape3DArray();        

        
        TriangleArray triangleArray = (TriangleArray) shape.getGeometry();
        //TriangleArray triangleArray = (TriangleArray) shape3DArray.get(0).getGeometry();
        
        
        int numVertices = triangleArray.getVertexCount();
        int numTriangles = triangleArray.getVertexCount() / 3;   
        float[] points = new float[numVertices * 3];
        int[] triangles = new int[numTriangles * 3];
        
        if (triangleArray != null)
        {
            System.out.println("VertexCount " + triangleArray.getVertexCount());
            for (int i = 0; i < triangleArray.getVertexCount(); i++)
            {
                Point3f p = new Point3f();
                triangleArray.getCoordinate(i, p);
                points[i * 3] = p.x;
                points[i * 3 + 1] = p.y;
                points[i * 3 + 2] = p.z;
                
                triangles[i] = i;
            }
        }
        

        sun.parameter("triangles", triangles);
        sun.parameter("points", "point", "vertex", points);
        //sun.parameter("normals", "vector", "vertex", normals);
        //sun.parameter("uvs", "texcoord", "vertex", uvs);
        sun.geometry(name, "triangle_mesh");


        // create instance
        sun.parameter("shaders", "default");
        //sun.parameter("modifiers", modifiers);
        //sun.parameter("transform", transform[0]);
        Matrix4 M = new Matrix4(o[0], o[1], o[2], o[3], o[4], o[5], o[6], o[7], o[8], o[9], o[10], o[11]);
        sun.parameter("transform", M);        
        sun.instance(name + ".instance", name);	        
        
        
    }

    private void setImageParameter(int resX, int resY, String sampler, int aaMin, 
            int aaMax, int aaSamples, float aaContrast, String filter,
            boolean aaJitter, boolean aaCache) 
    {
        sun.parameter("resolutionX", resX);
        sun.parameter("resolutionY", resY);        
        // SAMPLER (package org.sunflow.core.renderer.*)
        // =======
        // bucket      BucketRenderer
        // ipr         ProgressiveRenderer
        // fast        SimpleRenderer
        // multipass   MultipassRenderer
        sun.parameter("sampler", sampler);
        sun.parameter("aa.min", aaMin);
        sun.parameter("aa.max", aaMax);        
        sun.parameter("aa.samples", aaSamples);
        sun.parameter("aa.contrast", aaContrast);
        // FILTER (package org.sunflow.core.filter.*)
        // =======
        // box
        // triangle
        // gaussian
        // blackman-harris
        // sinc
        // mitchell 
        // catmull-rom 
        // lanczos 
        // bspline 
        sun.parameter("filter", filter);
        sun.parameter("aa.jitter", aaJitter);
        sun.parameter("aa.cache", aaCache);
        sun.options(SunflowAPI.DEFAULT_OPTIONS);
    }
    
    
    private void setShaderDiffuse(String shaderName, float[] rgb)
    {
        sun.parameter("diffuse", null, rgb);
        sun.shader(shaderName, "diffuse");
    }
    
    private void setShaderDiffuseTextured(String shaderName, String texture)
    {
        sun.parameter("texture", texture);
        sun.shader(shaderName, "textured_diffuse");    
    }
    
    private void setShaderPhong(String shaderName, float[] diffuseRGB, float[] specularRGB, float power, int samples)
    {
        sun.parameter("diffuse", null, diffuseRGB);
        sun.parameter("specular", null, specularRGB);
        sun.parameter("power", power);
        sun.parameter("samples", samples);
        sun.shader(shaderName, "phong");
    }
    
    private void setShaderPhongTextured(String shaderName, String texture, float[] specularRGB, float power, int samples)
    {
        sun.parameter("texture", texture);
        sun.parameter("specular", null, specularRGB);
        sun.parameter("power", power);
        sun.parameter("samples", samples);
        sun.shader(shaderName, "textured_phong");        
    }    
    
    private void setShaderAmbient(String shaderName, float[] brightRGB, float[] darkRGB, int samples, float maxdist)
    {
        sun.parameter("bright", null, brightRGB);
        sun.parameter("dark", null, darkRGB);
        sun.parameter("samples", samples);
        sun.parameter("maxdist", maxdist);
        sun.shader(shaderName, "ambient_occlusion");
    }

    private void setShaderAmbientTexture(String shaderName, String texture)
    {
        sun.parameter("texture", texture);
        sun.shader(shaderName, "textured_ambient_occlusion");        
    }    
    
    private void setShaderMirror(String shaderName, float[] color)
    {
        sun.parameter("color", null, color);
        sun.shader(shaderName, "mirror");
    }
    
    private void setShaderGlass(String shaderName, float eta, float[] color, float absorptionDistance, float[] absorptionColor)
    {
        sun.parameter("eta", eta);
        sun.parameter("color", null, color);
        sun.parameter("absorption.distance", absorptionDistance);
        sun.parameter("absorption.color", null, absorptionColor);
        sun.shader(shaderName, "glass");        
    }

    private void setShaderShiny(String shaderName, float[] color, float shiny)
    {
        sun.parameter("diffuse", null, color);
        sun.parameter("shiny", shiny);   // reflection
        sun.shader(shaderName, "shiny_diffuse");
    }

    private void setShaderShinyTexture(String shaderName, String texture, float shiny)
    {
        sun.parameter("texture", texture);
        sun.parameter("shiny", shiny);   // reflection
        sun.shader(shaderName, "textured_shiny_diffuse");        
    }
    
    private void setShaderWard(String shaderName, float[] diffuseColor, float[] specularColor, float roughnessX, float roughnessY, int samples)
    {
        sun.parameter("diffuse", null, diffuseColor);
        sun.parameter("specular", null, specularColor);
        sun.parameter("roughnessX", roughnessX);
        sun.parameter("roughnessY", roughnessY);        
        sun.parameter("samples", samples);
        sun.shader(shaderName, "ward");
    }

    private void setShaderWardTexture(String shaderName, String texture, float[] specularColor, float roughnessX, float roughnessY, int samples)
    {
        sun.parameter("texture", texture);
        sun.parameter("specular", null, specularColor);
        sun.parameter("roughnessX", roughnessX);
        sun.parameter("roughnessY", roughnessY);        
        sun.parameter("samples", samples);
        sun.shader(shaderName, "textured_ward");      
    }    
    
    private void setShaderConstant(String shaderName, float[] color)
    {
        sun.parameter("color", null, color);
        sun.shader(shaderName, "constant");
    }
    
    private void setShaderUber(String shaderName, float[] diffuseColor, String diffuseTexture, float diffuseBlend,
            float[] specularColor, String specularTexture, float specularBlend, float glossyness, int samples)
    {
        sun.parameter("diffuse", null, diffuseColor);
        sun.parameter("diffuse.texture", diffuseTexture);
        sun.parameter("diffuse.blend", diffuseBlend);
        sun.parameter("specular", null, specularColor);
        sun.parameter("specular.texture", specularTexture);
        sun.parameter("specular.blend", specularBlend);
        sun.parameter("glossyness", glossyness);
        sun.parameter("samples", samples);
        sun.shader(shaderName, "uber");  
    }

    private void setLightMesh(String lightName, float[] color, int samples)
    {
        float[] points = new float[] {  0f, 3f, -5f,
                                        5f, 3f, 0f,
                                        -5f, 3f, 5f };
        int[] triangles = new int[] {   0, 1, 2 };
        
        sun.parameter("radiance", null, color);
        sun.parameter("samples", samples);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("triangles", triangles);
        sun.light(lightName, "triangle_mesh");       
    }
    
    private void setLightPoint(String lightName, Point3 center, float[] power)
    {
        sun.parameter("center", center);
        //sun.parameter("power", null, power);
        sun.parameter("power", null, new float[] { 20f, 20f, 20f} );
        sun.light(lightName, "point");             
    }
    
    private void setLightSpherical(String lightName, float[] radiance, Point3 center, float radius, int samples)
    {
        sun.parameter("radiance", null, radiance);
        sun.parameter("center", center);
        sun.parameter("radius", radius);
        sun.parameter("samples", samples);
        sun.light(lightName, "sphere");        
    }

    private void setLightDirectional(String lightName, Point3 source, Point3 target, float radius, float[] radiance)
    {
        sun.parameter("source", source);
        sun.parameter("dir", Point3.sub(target, source, new Vector3()));
        sun.parameter("radius", radius);
        sun.parameter("radiance", null, radiance);
        sun.light(lightName, "directional");
    }
    
    private void setLightIbl(String lightName, String texture, Vector3 center, Vector3 up, boolean fixed, int samples, int lowsamples)
    {
        sun.parameter("texture", texture);
        sun.parameter("center", center);
        sun.parameter("up", up);
        sun.parameter("fixed", fixed);
        sun.parameter("samples", samples);
        sun.parameter("lowsamples", lowsamples);
        sun.light(lightName, "ibl");
    }
    
    private void setLightMeshlight(String lightName, float[] color, int samples)
    {
        float[] points = new float[] {  0f, 3f, -5f,
                                        5f, 3f, 0f,
                                        -5f, 3f, 5f };
        int[] triangles = new int[] {   0, 1, 2 };        
        
        sun.parameter("radiance", null, color);
        sun.parameter("samples", samples);
        sun.parameter("points", "point", "vertex", points);
        sun.parameter("triangles", triangles);
        sun.light(lightName, "triangle_mesh");          
    }
    
    private void setLightSunsky(String lightName, Vector3 up, Vector3 east, Vector3 sundir, float turbidity, int samples, boolean groundExtendsky, float[] groundColor)
    {
        sun.parameter("up", up);
        sun.parameter("east", east);
        sun.parameter("sundir", sundir);
        sun.parameter("turbidity", turbidity);
        sun.parameter("samples", samples);
        sun.parameter("ground.extendsky", groundExtendsky);
        sun.parameter("ground.color", null, groundColor);
        sun.light(lightName, "sunsky");        
    }
    
    private void setLightCornellbox(String lightName, Point3 corner0, Point3 corner1, 
            float[] leftColor, float[] rightColor, float[] topColor, 
            float[] bottomColor, float[] backColor, float[] radiance, int samples)
    {
        sun.parameter("corner0", corner0);
        sun.parameter("corner1", corner1);
        sun.parameter("leftColor", null, leftColor);
        sun.parameter("rightColor", null, rightColor);
        sun.parameter("topColor", null, topColor);
        sun.parameter("bottomColor", null, bottomColor);
        sun.parameter("backColor", null, backColor);
        sun.parameter("radiance", null, radiance);
        sun.parameter("samples", samples);
        sun.light(lightName, "cornell_box");
    }
    
    private void setCameraPinhole(String cameraName, float pinholeShutterOpen, 
            float pinholeShutterClose, float pinholeFov, float pinholeAspect, 
            float pinholeShiftX, float pinholeShiftY) 
    {
        sun.parameter("shutter.open", pinholeShutterOpen);
        sun.parameter("shutter.close", pinholeShutterClose);
        sun.parameter("fov", pinholeFov);
        sun.parameter("aspect", pinholeAspect);
        sun.parameter("shift.x", pinholeShiftX);
        sun.parameter("shift.y", pinholeShiftY);
        sun.camera(cameraName, "pinhole");    
    }

    private void setCameraThinlens(String cameraName, float thinlensShutterOpen, 
            float thinlensShutterClose, float thinlensFov, float thinlensAspect, 
            float thinlensShiftX, float thinlensShiftY, float thinlensFocusDistance, 
            float thinlensLensRadius, float thinlensLensSides, 
            float thinlensLensRotation) 
    {
        sun.parameter("shutter.open", thinlensShutterOpen);
        sun.parameter("shutter.close", thinlensShutterClose);
        sun.parameter("fov", thinlensFov);
        sun.parameter("aspect", thinlensAspect);
        sun.parameter("shift.x", thinlensShiftX);
        sun.parameter("shift.y", thinlensShiftY);
        sun.parameter("focus.distance", thinlensFocusDistance);
        sun.parameter("lens.radius", thinlensLensRadius);
        sun.parameter("lens.sides", thinlensLensSides);
        sun.parameter("lens.rotation", thinlensLensRotation);
        sun.camera(cameraName, "thinlens");
    }

    private void setCameraSpherical(String cameraName, float sphericalShutterOpen, 
            float sphericalShutterClose) 
    {
        sun.parameter("shutter.open", sphericalShutterOpen);
        sun.parameter("shutter.close", sphericalShutterClose);
        sun.camera(cameraName, "spherical");
    }

    private void setCameraFisheye(String cameraName, float fisheyeShutterOpen, 
            float fisheyeShutterClose) 
    {
        sun.parameter("shutter.open", fisheyeShutterOpen);
        sun.parameter("shutter.close", fisheyeShutterClose);
        sun.camera(cameraName, "fisheye");
    }    
    
    
    
    
////////////////////////////////////////////////////////////////////////////
//                                   G U I 
////////////////////////////////////////////////////////////////////////////
    
    
    
    
    
    
    
    
    private HashMap<String, Object> dict = new HashMap<String, Object>();
    
    private String[] shaders = new String[] { 
        "diffuse",
        "phong",
        "ambient",
        "mirror",
        "glass",
        "shiny",
        "ward",
        "constant",
        "uber",
        "view_caustics",
        "view_irradiance",
        "view_global"
    };
    
    private String[] lights = new String[] { 
        "mesh", 
        "point",
        "spherical",
        "directional",
        "ibl",
        "meshlight",
        "sunsky",
        "cornellbox"
    };
    
    private String[] cameras = new String[] { 
        "pinhole",
        "thinlens",
        "spherical",
        "fisheye"
    };    
    
    private HashMap<String, JPanel> shaderPanels = new HashMap<String, JPanel>();
    private HashMap<String, JPanel> lightPanels = new HashMap<String, JPanel>();
    private HashMap<String, JPanel> cameraPanels = new HashMap<String, JPanel>();
    private JPanel currentShaderPanel = null;
    private JPanel currentLightPanel = null;
    private JPanel currentCameraPanel = null;
            
    private void buildGUI()
    {
        JPanel panel;

        
        
        
        // SHADER

        panelShaderSettings.setLayout(new BorderLayout());
        for (String name: shaders)
        {
            panel = new JPanel();
            panel.setLayout(new SpringLayout());
            shaderPanels.put(name, panel);
        }
        
        panel = shaderPanels.get("diffuse");
        createRGBInput(panel, "diffuse.rgb", "RGB", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "diffuse.texture", "Texture", "");
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelShaderSettings.add(panel, BorderLayout.NORTH);
        currentShaderPanel = panel;

        panel = shaderPanels.get("phong");
        createRGBInput(panel, "phong.diffuse.rgb", "diffuse RGB", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "phong.texture", "Texture", "");
        createRGBInput(panel, "phong.specular.rgb", "specular RGB", colorToFloatArray(Color.WHITE));
        createFloatInput(panel, "phong.power", "power", 0.1f);
        createIntegerInput(panel, "phong.samples", "samples", 10);
        SpringUtilities.makeCompactGrid(panel, 5, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("ambient");
        createRGBInput(panel, "ambient.bright.RGB", "Bright RGB", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "ambient.texture", "Texture", "");
        createRGBInput(panel, "ambient.dark.RGB", "Dark RGB", colorToFloatArray(Color.BLACK));
        createIntegerInput(panel, "ambient.samples", "Samples", 10);
        createFloatInput(panel, "ambient.maxdist", "MaxDist", 0.5f);
        SpringUtilities.makeCompactGrid(panel, 5, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("mirror");
        createRGBInput(panel, "mirror.color.RGB", "Color RGB", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 1, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = shaderPanels.get("glass");
        createFloatInput(panel, "glass.eta", "Eta", 1f);
        createRGBInput(panel, "glass.color.RGB", "Color", colorToFloatArray(Color.WHITE));
        createFloatInput(panel, "glass.absorption.distance", "Absorption distance", 5f);
        createRGBInput(panel, "glass.absorption.color.RGB", "Absorption Color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 4, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("shiny");
        createRGBInput(panel, "shiny.diffuse.color.RGB", "Color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "shiny.texture", "Texture", "");
        createFloatInput(panel, "shiny.value", "Shiny", 0f);
        SpringUtilities.makeCompactGrid(panel, 3, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = shaderPanels.get("ward");
        createRGBInput(panel, "ward.diffuse.color.RGB", "Diffuse color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "ward.texture", "Texture", "");
        createRGBInput(panel, "ward.specular.color.RGB", "Specular color", colorToFloatArray(Color.WHITE));
        createFloatInput(panel, "ward.roughnessX", "roughnessX", 0f);
        createFloatInput(panel, "ward.roughnessY", "roughnessY", 0f);
        createIntegerInput(panel, "ward.samples", "Samples", 10);
        SpringUtilities.makeCompactGrid(panel, 6, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = shaderPanels.get("constant");
        createRGBInput(panel, "constant.color.RGB", "Color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 1, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = shaderPanels.get("uber");
        createRGBInput(panel, "uber.diffuse.color.RGB", "Diffuse color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "uber.diffuse.texture", "Diffuse texture", "");
        createFloatInput(panel, "uber.diffuse.blend", "Diffuse blend", 0f);
        createRGBInput(panel, "uber.specular.color.RGB", "Specular color", colorToFloatArray(Color.WHITE));
        createTextInput(panel, "uber.specular.texture", "Specular texture", "");
        createFloatInput(panel, "uber.specular.blend", "Specular blend", 0f);
        createFloatInput(panel, "uber.glossyness", "Glossyness", 0f);
        createIntegerInput(panel, "uber.samples", "Samples", 10);
        SpringUtilities.makeCompactGrid(panel, 8, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        // ---------------------------------------------------------------------
        // LIGHT
        
        panelLightSettings.setLayout(new BorderLayout());
        for (String name: lights)
        {
            panel = new JPanel();
            panel.setLayout(new SpringLayout());
            lightPanels.put(name, panel);
        }
        
        panel = lightPanels.get("mesh");
        createRGBInput(panel, "mesh.radiance.color", "RGB", colorToFloatArray(Color.WHITE));
        createIntegerInput(panel, "mesh.samples", "Samples", 4);
        createTextInput(panel, "mesh.source", "Mesh Light Source", "");
        SpringUtilities.makeCompactGrid(panel, 3, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelLightSettings.add(panel, BorderLayout.NORTH);
        currentLightPanel = panel;        
    
        panel = lightPanels.get("point");
        createPointInput(panel, "point.center", "Center (xyz)", new Point3(0, 2.4f, 1f));
        createRGBInput(panel, "point.power", "Power", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad

        panel = lightPanels.get("spherical");
        createRGBInput(panel, "spherical.radiance.color", "Radiance color", colorToFloatArray(Color.WHITE));
        createPointInput(panel, "spherical.center", "Center (xyz)", new Point3(0, 2.4f, 1f));
        createFloatInput(panel, "spherical.radius", "Radius", 1f);
        createIntegerInput(panel, "spherical.samples", "Samples", 64);
        SpringUtilities.makeCompactGrid(panel, 4, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        
        panel = lightPanels.get("directional");
        createPointInput(panel, "directional.source", "Source (xyz)", new Point3(0, 2.4f, 1f));
        createPointInput(panel, "directional.target", "Target (xyz)", new Point3(0, 0f, 0f));
        createFloatInput(panel, "directional.radius", "Radius", 6f);
        createRGBInput(panel, "directional.radiance.color", "Radiance color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 4, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad        

        panel = lightPanels.get("ibl");
        createTextInput(panel, "ibl.texture", "texture", "");
        createVectorInput(panel, "ibl.center", "center", new Vector3(0, 2.4f, 1f));
        createVectorInput(panel, "ibl.up", "up", new Vector3(0, 1f, 0f));
        createBooleanInput(panel, "ibl.fixed", "fixed", false);
        createIntegerInput(panel, "ibl.samples", "samples", 4);
        createIntegerInput(panel, "ibl.lowsamples", "lowsamples", 4);
        SpringUtilities.makeCompactGrid(panel, 6, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad           

        panel = lightPanels.get("meshlight");
        createRGBInput(panel, "meshlight.radiance", "radiance color", colorToFloatArray(Color.WHITE));
        createIntegerInput(panel, "meshlight.samples", "Samples", 4);
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad           

        panel = lightPanels.get("sunsky");
        createVectorInput(panel, "sunsky.up", "center", new Vector3(0, 1, 0));
        createVectorInput(panel, "sunsky.east", "east", new Vector3(0, 0, 1));
        createVectorInput(panel, "sunsky.sundir", "sundir", new Vector3(1, 1, 1));
        createFloatInput(panel, "sunsky.turbidity", "turbidity", 4f);
        createIntegerInput(panel, "sunsky.samples", "samples", 64);
        createBooleanInput(panel, "sunsky.ground.extendsky", "ground.extendsky", false);
        createRGBInput(panel, "sunsky.ground.color", "ground.color", colorToFloatArray(Color.WHITE));
        SpringUtilities.makeCompactGrid(panel, 7, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad 
        
        panel = lightPanels.get("cornellbox");
        createPointInput(panel, "cornellbox.corner0", "corner0", new Point3(0, 2.4f, 1f));
        createPointInput(panel, "cornellbox.corner1", "corner1", new Point3(0, 2.4f, 1f));
        createRGBInput(panel, "cornellbox.leftColor", "leftColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.rightColor", "rightColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.topColor", "topColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.bottomColor", "bottomColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.backColor", "backColor", colorToFloatArray(Color.WHITE));
        createRGBInput(panel, "cornellbox.radiance", "radiance", colorToFloatArray(Color.WHITE));
        createIntegerInput(panel, "cornellbox.samples", "samples", 4);
        SpringUtilities.makeCompactGrid(panel, 8, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad 
        
        
        
        // ---------------------------------------------------------------------
        // CAMERA
        
        panelCameraSettings.setLayout(new BorderLayout());
        for (String name: cameras)
        {
            panel = new JPanel();
            panel.setLayout(new SpringLayout());
            cameraPanels.put(name, panel);
        }
        
        panel = cameraPanels.get("pinhole");
        createFloatInput(panel, "pinhole.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "pinhole.shutter.close", "shutter.close", 0f);
        createFloatInput(panel, "pinhole.fov", "fov", 25f);
        createFloatInput(panel, "pinhole.aspect", "aspect", 1.777f);
        createFloatInput(panel, "pinhole.shift.x", "shift.x", 0f);
        createFloatInput(panel, "pinhole.shift.y", "shift.y", 0f);
        SpringUtilities.makeCompactGrid(panel, 6, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelCameraSettings.add(panel, BorderLayout.NORTH);
        currentCameraPanel = panel;        
        
        panel = cameraPanels.get("thinlens");
        createFloatInput(panel, "thinlens.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "thinlens.shutter.close", "shutter.close", 0f);
        createFloatInput(panel, "thinlens.fov", "fov", 20f);
        createFloatInput(panel, "thinlens.aspect", "aspect", 1.777f);
        createFloatInput(panel, "thinlens.shift.x", "shift.x", 0f);
        createFloatInput(panel, "thinlens.shift.y", "shift.y", 0f);
        createFloatInput(panel, "thinlens.focus.distance", "focus.distance", 1f);
        createFloatInput(panel, "thinlens.lens.radius", "lens.radius", 1f);
        createIntegerInput(panel, "thinlens.lens.sides", "lens.sides", 1);
        createFloatInput(panel, "thinlens.lens.rotation", "lens.rotation", 0f);
        SpringUtilities.makeCompactGrid(panel, 10, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelCameraSettings.add(panel, BorderLayout.NORTH);
        
        panel = cameraPanels.get("spherical");
        createFloatInput(panel, "spherical.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "spherical.shutter.close", "shutter.close", 0f);
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelCameraSettings.add(panel, BorderLayout.NORTH);
        
        panel = cameraPanels.get("fisheye");
        createFloatInput(panel, "fisheye.shutter.open", "shutter.open", 0f);
        createFloatInput(panel, "fisheye.shutter.close", "shutter.close", 0f);
        SpringUtilities.makeCompactGrid(panel, 2, 2, 6, 6, 6, 6);         //rows, cols initX, initY xPad, yPad
        panelCameraSettings.add(panel, BorderLayout.NORTH);
    }

    
    private void createIntegerInput(JPanel parent, String name, String caption, int defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf = new JTextField();
        tf.setText(Integer.toString(defaultValue));
        
        parent.add(label);
        parent.add(tf);

        label.setLabelFor(tf);
        
        dict.put(name, tf);
    }
    
    private void createBooleanInput(JPanel parent, String name, String caption, boolean defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JCheckBox cb = new JCheckBox();
        cb.setText("");
        cb.setSelected(defaultValue);
        
        parent.add(label);
        parent.add(cb);

        label.setLabelFor(cb);
        
        dict.put(name, cb);
    }    
    
    private void createFloatInput(JPanel parent, String name, String caption, float defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf = new JTextField();
        tf.setText(Float.toString(defaultValue));
        
        parent.add(label);
        parent.add(tf);

        label.setLabelFor(tf);
        
        dict.put(name, tf);
    }
    

    private void createTextInput(JPanel parent, String name, String caption, String defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf = new JTextField(10);
        tf.setText(defaultValue);
        
        parent.add(label);
        parent.add(tf);

        label.setLabelFor(tf);

        dict.put(name, tf);
    }    
    
    private void createRGBInput(JPanel parent, String name, String caption, float[] defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        //final JTextField tf = new JTextField(10);
        final JPanel colorPanel = new JPanel();
        colorPanel.setBackground(colorFromFloatArray(defaultValue));
        JButton btn = new JButton("...");
        btn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) 
            {
                Color color = JColorChooser.showDialog(null, "Choose Color", colorPanel.getBackground());
                colorPanel.setBackground(color);
            }
        });
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(colorPanel);
        subPanel.add(btn);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, colorPanel);        
    }
    
    private void createManualRGBInput(JPanel parent, String name, String caption, float[] defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        JTextField tf3 = new JTextField();
        
        tf1.setText(Float.toString(defaultValue[0]));
        tf2.setText(Float.toString(defaultValue[1]));
        tf3.setText(Float.toString(defaultValue[2]));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        subPanel.add(tf3);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);         
    }
    
    private void createPointInput(JPanel parent, String name, String caption, Point3 defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        JTextField tf3 = new JTextField();
        
        tf1.setText(Float.toString(defaultValue.x));
        tf2.setText(Float.toString(defaultValue.y));
        tf3.setText(Float.toString(defaultValue.z));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        subPanel.add(tf3);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);        
    }    

    private void createVectorInput(JPanel parent, String name, String caption, Vector3 defaultValue)
    {
        JLabel label = new JLabel(caption, JLabel.TRAILING);
        JTextField tf1 = new JTextField();
        JTextField tf2 = new JTextField();
        JTextField tf3 = new JTextField();
        
        tf1.setText(Float.toString(defaultValue.x));
        tf2.setText(Float.toString(defaultValue.y));
        tf3.setText(Float.toString(defaultValue.z));
        
        JPanel subPanel = new JPanel(new FlowLayout());
        subPanel.add(tf1);
        subPanel.add(tf2);
        subPanel.add(tf3);
        
        parent.add(label);
        parent.add(subPanel);

        label.setLabelFor(subPanel);

        dict.put(name, subPanel);        
    }       
    
    private int getIntInput(String name)
    {
        JTextField tf = (JTextField) dict.get(name);
        return Integer.parseInt(tf.getText());
    }

    private boolean getBooleanInput(String name)
    {
        JCheckBox cb = (JCheckBox) dict.get(name);
        return cb.isSelected();
    }
    
    private float getFloatInput(String name)
    {
        JTextField tf = (JTextField) dict.get(name);
        return Float.parseFloat(tf.getText());
    }
    
    private String getTextInput(String name)
    {
        JTextField tf = (JTextField) dict.get(name);
        return tf.getText();
    }
    
    private float[] getRGBInput(String name)
    {
        JPanel colorPanel = (JPanel) dict.get(name);
        return colorToFloatArray(colorPanel.getBackground());
    }
    
    private float[] getManualRGBInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        float[] result = new float[] {  Float.parseFloat(tf1.getText()),
                                        Float.parseFloat(tf2.getText()),
                                        Float.parseFloat(tf3.getText()) };
        
        return result;
    }    
    
    private Point3 getPointInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        Point3 result = new Point3(Float.parseFloat(tf1.getText()),
                                   Float.parseFloat(tf2.getText()),
                                   Float.parseFloat(tf3.getText()));
        
        return result;
    }    

    private Vector3 getVectorInput(String name)
    {
        JPanel p = (JPanel) dict.get(name);
        JTextField tf1 = (JTextField) p.getComponent(0);
        JTextField tf2 = (JTextField) p.getComponent(1);
        JTextField tf3 = (JTextField) p.getComponent(2);

        Vector3 result = new Vector3(Float.parseFloat(tf1.getText()),
                                   Float.parseFloat(tf2.getText()),
                                   Float.parseFloat(tf3.getText()));
        
        return result;
    }       

    private void ChangeShaderSettingsPanel(String shaderType) 
    {
        JPanel panel = shaderPanels.get(shaderType);
        if (currentShaderPanel != null)
        {
            //currentShaderPanel.setVisible(false);
            //currentShaderPanel = panel;
            //panel.setVisible(true);
            
            panelShaderSettings.remove(currentShaderPanel);
            panelShaderSettings.add(panel, BorderLayout.NORTH);
            currentShaderPanel = panel;
            panelShaderSettings.updateUI();
        }
    }

    private void ChangeLightSettingsPanel(String lightType) 
    {
        JPanel panel = lightPanels.get(lightType);
        if (currentLightPanel != null)
        {
            panelLightSettings.remove(currentLightPanel);
            panelLightSettings.add(panel, BorderLayout.NORTH);
            currentLightPanel = panel;
            panelLightSettings.updateUI();
        }
    }    

    private void ChangeCameraSettingsPanel(String cameraType) 
    {
        JPanel panel = cameraPanels.get(cameraType);
        if (currentCameraPanel != null)
        {
            panelCameraSettings.remove(currentCameraPanel);
            panelCameraSettings.add(panel, BorderLayout.NORTH);
            currentCameraPanel = panel;
            panelCameraSettings.updateUI();
        }
    }      
    
    private Color colorFromFloatArray(float[] rgbArray)
    {
        return new Color(rgbArray[0], rgbArray[1], rgbArray[2]);
    }
    
    private float[] colorToFloatArray(Color color)
    {
        float[] colorArray = new float[3];
        color.getRGBColorComponents(colorArray);
        return colorArray;
    }


    
}
